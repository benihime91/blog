{
  
    
        "post0": {
            "title": "Creating a NeuralNetwork from scratch",
            "content": "I will assume that you all know what a artificial neural network is and have a little bit of knowledge about forward and backward propagation. Just having a simple idea is enough. . Tip: If you do not know what the above terms are or would like to brush up on the topics, I would suggest going through this amazing youtube playlist by 3Blue1Brown. . . Setting up Imports: . import numpy as np import gzip import pickle import pandas as pd import matplotlib.pyplot as plt import warnings np.random.seed(123) %matplotlib inline warnings.filterwarnings(&quot;ignore&quot;) . Preparing the data . For this blog post, we&#39;ll use one of the most famous datasets in computer vision, MNIST. MNIST contains images of handwritten digits, collected by the National Institute of Standards and Technology and collated into a machine learning dataset by Yann Lecun and his colleagues. Lecun used MNIST in 1998 in Lenet-5, the first computer system to demonstrate practically useful recognition of handwritten digit sequences. This was one of the most important breakthroughs in the history of AI. . Run the code given below to download the MNIST dataset. . wget -P path http://deeplearning.net/data/mnist/mnist.pkl.gz . . Note: the above code snippet will download the dataset to {path} so be sure to set the {path} to the desired location of your choice. . def get_data(path): &quot;&quot;&quot; Fn to unzip the MNIST data and return the data as numpy arrays &quot;&quot;&quot; with gzip.open(path, &#39;rb&#39;) as f: ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=&#39;latin-1&#39;) return map(np.array, (x_train,y_train,x_valid,y_valid)) # Grab the MNIST dataset x_train,y_train,x_valid,y_valid = get_data(path= &quot;../../Datasets/mnist.pkl.gz&quot;) tots,feats = x_train.shape print(&quot;Shape of x_train:&quot;,x_train.shape) print(&quot;Total number of examples:&quot;, tots) print(&quot;Number of pixel values per image:&quot;, feats) . Shape of x_train: (50000, 784) Total number of examples: 50000 Number of pixel values per image: 784 . Preparing our train &amp; validation datasets . To make our life a bit easier we are going to take only the examples that contain a 1 or 0. . zero_mask = [y_train==0] # grab all the index values where 0 is present one_mask = [y_train==1] # grad all the index valus where 1 is present # grab all the 1&#39;s and 0&#39;s and make training set x_train = np.vstack((x_train[zero_mask], x_train[one_mask])) y_train = np.reshape(y_train, (-1,1)) y_train = np.squeeze(np.vstack((y_train[zero_mask], y_train[one_mask]))).reshape(-1,1) x_train.shape, y_train.shape . ((10610, 784), (10610, 1)) . Our training set now has 10610 examples . zero_mask = [y_valid==0] # grab all the index values where 0 is present one_mask = [y_valid==1] # grad all the index valus where 1 is present # grab all the 1&#39;s and 0&#39;s and make training set x_valid = np.vstack((x_valid[zero_mask], x_valid[one_mask])) y_valid = np.reshape(y_valid, (-1,1)) y_valid = np.squeeze(np.vstack((y_valid[zero_mask], y_valid[one_mask]))).reshape(-1,1) x_valid.shape, y_valid.shape . ((2055, 784), (2055, 1)) . Our validation set now has 2055 examples . Why do we need different training and validation sets ? . Since, this topic requires a different post on it&#39;s own I won&#39;t be covering it here. But you can get the idea from this above video: . Let&#39;s view some example images from our dataset: . plt.imshow(x_train[50].reshape(28,28), cmap=&quot;binary&quot;); . . plt.imshow(x_train[5000].reshape(28,28), cmap=&quot;binary&quot;); . . Basic Model Architecture . For this task we are going to use a very basic model architecture this 2 linear layers and a output layer with 1 unit. . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G X X linear1 linear1 X&#45;&gt;linear1 relu1 relu1 linear1&#45;&gt;relu1 linear2 linear2 relu1&#45;&gt;linear2 relu2 relu2 linear2&#45;&gt;relu2 linear3 linear3 relu2&#45;&gt;linear3 sigmoid sigmoid linear3&#45;&gt;sigmoid prediction prediction sigmoid&#45;&gt;prediction W1 W1 W1&#45;&gt;linear1 B1 B1 B1&#45;&gt;linear1 W2 W2 W2&#45;&gt;linear2 B2 B2 B2&#45;&gt;linear2 W3 W3 W3&#45;&gt;linear3 B3 B3 B3&#45;&gt;linear3 and then using the predicted value from the above model and the real_target value the loss is calculated: . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G prediction prediction loss loss prediction&#45;&gt;loss target target target&#45;&gt;loss Let&#39;s take a deep dive into what this network means: . Let&#39;s take at look at all the individual components of this network: . Linear: The linear layer computes the following : . out = matmul(input,W1) + B1 . | ReLU: The relu computes the following: . out = max(0, input) . | Sigmoid: The sigmoid computes the following: . out = 1/(1 + e.pow(input)) . | Loss: For the loss we are going to use the CrossEntropy Loss which is defined by the follwoing equation: $$loss= - frac{1}{m} sum limits_{i = 1}^{m} (y^{(i)} log left(yhat^{(i)} right) + (1-y^{(i)}) log left(1-yhat^{(i)} right)) $$ . | . Now that we have our model architecture, let&#39;s create the different parts needed to assemble the model: . linear layer | relu activation | sigmoid activation | loss | . Let&#39;s first try to make some sense of what is happening in the backward and forward pass of our model: . On paper our forward pass would look something like this: . Note: @ in python is the matrix-multiplication operator. . inputs = x # original inputs targets = y # original targets z1 = inputs @ w2 + b2 a1 = relu(z1) z2 = a1 @ w2 + b2 a2 = sigmoid(z2) # this is our model prediction loss = loss_fn(a2, targets) . . Note: This is not actual code it&#8217;s just psuedo-code for understanding. . Consequently our backward pass would look something like this : . (Let us assume that the grad(inp, out) computes the gradients of inp wrt out) . # gradient of loss wrt output of the previous activation layer da2 = grad(loss, a2) # gradient of loss wrt to z2 dz2 = grad(loss, z2) = grad(loss, a2) * grad(a2,z2) # gradient of the loss wrt to weight w2: [current layer] dw2 = grad(loss, w2) = grad(loss, z2) * grad(z2, w2) = dz2 * grad(z2, w2) # gradient of the loss wrt to bias b2: [current layer] db2 = grad(loss, b2) = grad(loss, z2) * grad(z2, b2) = dz2 * grad(z2, b2) # gradient of loss wrt a1: [previous layer] da1 = grad(loss, a1) = grad(loss, z2) * grad(z2, a1) = dz2 * grad(z2, a1) # gradient of loss wrt z1 dz1 = grad(loss, z1) = grad(loss, a1) * grad(a1, z1) = da1 * grad(a1, z1) # gradient of the loss wrt to weight w1: [current layer] dw1 = grad(loss, w1) = grad(loss, z1) * grad(z1, w1) = dz1 * grad(z1, w1) # gradient of the loss wrt to bias b1: [current layer] db1 = grad(loss, b1) = grad(loss, z1) * grad(z1, b1) = dz1 * grad(z1, b1) # gradient of the loss wrt to a0: [previous layer] da0 = grad(loss, a0) = grad(loss, z1) * grad(z1, a0) = dz2 * grad(z1, a0) # Update parameters : # since we now have all the required gradients we can now perform the update step w1 -= learning_rate * dw1 b1 -= learning_rate * db1 w2 -= learning_rate * dw2 b2 -= learning_rate * db2 . . Note: This is not actual code it&#8217;s just psuedo-code for understanding. . linear layer . Below code creates a Linear class which represents a Linear layer in our neural-network. The forward function of the class implements the of the layer&#39;s forward propagation &amp; the backward function implements the layers&#39;s backward propagation. Let&#39;s go to detail into what the code means: . Forward: This part is quite straight-forward it computes the dot-product between the input and the weights &amp; adds the bias term to get z. It also stores all the intermidiate values generated to use in the backward pass. | . Backward: The backward method of the class Linear takes in the argument grads. | grads is the gradient of the loss wrt to the output of the current linear layer ie., dz if we were to follow the nomenclature of our pseudo-code. | To succesfully compute the backward pass for our linear layer we need the following: grad(z, w) | grad(z, b) | grad(z, a_prev) | . | . | . . Note: z, w, b, a_prev are the outputs, weights, bias and input-activations of the Linear layer respectively. . class Linear: def __init__(self, w, b): self.w = w self.b = b def forward(self, inp): &quot;&quot;&quot; Implement the linear part of a layer&#39;s forward propagation. Args: inp : activations from previous layer (or input data) Returns: z : the input of the activation function, also called pre-activation parameter &quot;&quot;&quot; self.inp = inp self.z = inp @ self.w + self.b return self.z def backward(self, grads): &quot;&quot;&quot; Implement the linear portion of backward propagation for a single layer. Args: grads : Gradient of the cost with respect to the linear output. or the accumulated gradients from the prev layers. This is used for the chain rule to compute the gradients. Returns: da : Gradient of cost wrt to the activation of the previous layer or the input of the current layer. dw : Gradient of the cost with respect to W db : Gradient of the cost with respect to b &quot;&quot;&quot; m = self.inp.shape[1] # gradient of loss wrt to the weights dw = 1/m * (self.inp.T @ grads) # gradient of the loss wrt to the bias db = 1/m * np.sum(grads, axis=0, keepdims=True) # gradient of the loss wrt to the input of the linear layer # this is used to continue the chain rule da_prev = grads @ self.w.T return (da_prev, dw, db) . ReLU layer . Forward: The mathematical formula for ReLU is $A = RELU(Z) = max(0, Z)$ | Backward: During the backward pass the relu accepts the gradients of the loss wrt to the activation i.e, da then computes the gradients of the loss wrt to the input-of-relu(z) i.e, dz. | . class RelU: def forward(self, inp): &quot;&quot;&quot; Implement the RELU function. Args: inp : Output of the linear layer, of any shape Returns: a : Post-activation parameter, of the same shape as Z &quot;&quot;&quot; self.inp = inp self.output = np.maximum(0, self.inp) return self.output def backward(self, grads): &quot;&quot;&quot; Implement the backward propagation for a single RELU unit. Ars: grads : gradients of the loss wrt to the activation output Returns: dz : Gradient of the loss with respect to the input of the activation &quot;&quot;&quot; dz = np.array(grads, copy=True) dz[self.inp &lt;= 0] = 0 return dz . sigmoid layer . The sigmoid layer functions in exactly the same way as the ReLU layer . The only difference is the forward pass output calculation. . In the sigmoid layer: $ sigma(Z) = frac{1}{ 1 + e^{-(W A + b)}}$ . class Sigmoid: def forward(self, inp): &quot;&quot;&quot; Implements the sigmoid activation in numpy Args: inp: numpy array of any shape Returns: a : output of sigmoid(z), same shape as inp &quot;&quot;&quot; self.inp = inp self.out = 1/(1+np.exp(-self.inp)) return self.out def backward(self, grads): &quot;&quot;&quot; Implement the backward propagation for a single sigmoid unit. Args: grads : gradients of the loss wrt to the activation output Returns: dz : Gradient of the loss with respect to the input of the activation &quot;&quot;&quot; s = 1/(1+np.exp(-self.inp)) dz = grads * s * (1-s) return dz . Loss_function : . For this task we are going to use the CrossEntropy Loss . The forward pass of the CrossEntropy Loss is computed as follows: $$loss= - frac{1}{m} sum limits_{i = 1}^{m} (y^{(i)} log left(yhat^{(i)} right) + (1-y^{(i)}) log left(1-yhat^{(i)} right)) $$ . class CELoss(): def forward(self, pred, target): &quot;&quot;&quot; Implement the CrossEntropy loss function. Args: pred : predicted labels from the neural network target : true &quot;label&quot; labels Returns: loss : cross-entropy loss &quot;&quot;&quot; self.yhat = pred self.y = target m = self.y.shape[0] # commpute loss term1 = (np.multiply(self.y, np.log(self.yhat))) term2 = (np.multiply((1-self.y),(np.log(1-self.yhat)))) loss = -1/m * np.sum(term1+term2) self.output = loss return np.squeeze(self.output) # convert array to a single value number def backward(self): &quot;&quot;&quot; Computes the gradinets of the loss_fn wrt to the predicted labels Returns: da : derivative of loss_fn wrt to the predicted labels &quot;&quot;&quot; # derivative of loss_fn with respect to a [predicted labels] da = - (np.divide(self.y, self.yhat) - np.divide(1 - self.y, 1 - self.yhat)) return da . Model: . Let&#39;s go over the architecture that we are going to use for our neural netwok: . Our model is going to have 2 hidden layers and a output layer. The hidden layers are going to have 16 units each followed by a ReLU activation layer and the output layer is going to have 1 unit followed by a Sigmoid unit. The ouput layer is going to predict the input is either 0 or 1. . Let&#39;s assemble the layers required to construct out model: . x_train.shape, y_train.shape . ((10610, 784), (10610, 1)) . nh1 = 16 # no. of units in the first hidden layer nh2 = 16 # no. of units in the 2nd hidden layer nh3 = 1 # no. of units in the output layer w1 = np.random.randn(x_train.shape[1], nh1) * 0.01 b1 = np.zeros((1, nh1)) w2 = np.random.randn(nh1, nh2) * 0.01 b2 = np.zeros((1, nh2)) w3 = np.random.randn(nh2, nh3) b3 = np.zeros((1, nh3)) w1.shape, b1.shape, w2.shape, b2.shape, w3.shape, b3.shape . ((784, 16), (1, 16), (16, 16), (1, 16), (16, 1), (1, 1)) . lin1 = Linear(w1,b1) # 1 hidden layer relu1 = RelU() lin2 = Linear(w2,b2) # 2nd hidden layer relu2 = RelU() lin3 = Linear(w3,b3) # output layer sigmoid = Sigmoid() loss_fn = CELoss() # loss_fn . Forward pass: . z1 = lin1.forward(x_train) a1 = relu1.forward(z1) z2 = lin2.forward(a1) a2 = relu2.forward(z2) z3 = lin3.forward(a2) pred = sigmoid.forward(z3) # calculate loss loss = loss_fn.forward(pred, y_train) print(&quot;Loss:&quot;, loss) # print out the loss . Loss: 0.6954586218304929 . print(&quot;Predictions: &quot;, pred) . Predictions: [[0.50221048] [0.5016568 ] [0.50445 ] ... [0.5006608 ] [0.49939964] [0.49894181]] . Backward pass: . da3 = sigmoid.backward(loss_fn.backward()) dz3, dw3, db3 = lin3.backward(da3) da2 = relu2.backward(dz3) dz2, dw2, db2 = lin2.backward(da2) da1 = relu1.backward(dz2) _, dw1, db1 = lin1.backward(da1) . Update parameters: . learning_rate = 0.0002 # update parameters lin1.w -= learning_rate * dw1 lin2.w -= learning_rate * dw2 lin3.w -= learning_rate * dw3 lin1.b -= learning_rate * db1 lin2.b -= learning_rate * db2 lin3.b -= learning_rate * db3 . Putting it all together: . nh1 = 16 # no. of units in the first hidden layer nh2 = 16 # no. of units in the 2nd hidden layer nh3 = 1 # no. of units in the output layer w1 = np.random.randn(x_train.shape[1], nh1) * 0.01 b1 = np.zeros((1, nh1)) w2 = np.random.randn(nh1, nh2) * 0.01 b2 = np.zeros((1, nh2)) w3 = np.random.randn(nh2, nh3) b3 = np.zeros((1, nh3)) print(w1.shape, b1.shape, w2.shape, b2.shape, w3.shape, b3.shape) . (784, 16) (1, 16) (16, 16) (1, 16) (16, 1) (1, 1) . class Model: def __init__(self, learning_rate): &quot;&quot;&quot; A simple neural network model The `forward` method computes the forward propagation step of the model The `backward` method computes the backward step propagation of the model The `update_step` method updates the parameters of the model &quot;&quot;&quot; self.lin1 = Linear(w1,b1) self.relu1 = RelU() self.lin2 = Linear(w2,b2) self.relu2 = RelU() self.lin3 = Linear(w3,b3) self.sigmoid = Sigmoid() self.loss_fn = CELoss() self.lr = learning_rate self.losses = [] # stores the loss at each iteration def forward(self, inp, calc_loss=True): &quot;&quot;&quot; Computs the forward step for out model Returns the loss and the prediction of the model &quot;&quot;&quot; out = self.relu1.forward(self.lin1.forward(inp)) out = self.relu2.forward(self.lin2.forward(out)) pred = self.sigmoid.forward(self.lin3.forward(out)) if calc_loss: loss = self.loss_fn.forward(pred, y_train) # appending the loss of the current iteration self.losses.append(loss) return loss, pred else: return pred def backward(self): &quot;&quot;&quot; Computes the backward step and return the gradients of the parameters with the loss &quot;&quot;&quot; da3 = self.sigmoid.backward(self.loss_fn.backward()) dz3, dw3, db3 = self.lin3.backward(da3) da2 = self.relu2.backward(dz3) dz2, dw2, db2 = self.lin2.backward(da2) da1 = self.relu1.backward(dz2) _, dw1, db1 = self.lin1.backward(da1) self.dws = [dw1, dw2, dw3] self.dbs = [db1, db2, db3] def update_step(self): &quot;&quot;&quot; Performs the update step &quot;&quot;&quot; self.lin1.w -= self.lr * self.dws[0] self.lin2.w -= self.lr * self.dws[1] self.lin3.w -= self.lr * self.dws[2] self.lin1.b -= self.lr * self.dbs[0] self.lin2.b -= self.lr * self.dbs[1] self.lin3.b -= self.lr * self.dbs[2] . nn = Model(learning_rate=0.0005) epochs = 50 # no. of iterations to train for n in range(epochs): loss, _ = nn.forward(x_train) nn.backward() nn.update_step() print(f&quot;Loss after interation {n} is {loss:.4f}&quot;) . Loss after interation 0 is 0.6935 Loss after interation 1 is 0.6829 Loss after interation 2 is 0.6675 Loss after interation 3 is 0.6481 Loss after interation 4 is 0.6228 Loss after interation 5 is 0.5924 Loss after interation 6 is 0.5488 Loss after interation 7 is 0.5149 Loss after interation 8 is 0.4527 Loss after interation 9 is 0.3746 Loss after interation 10 is 0.3095 Loss after interation 11 is 0.2433 Loss after interation 12 is 0.2016 Loss after interation 13 is 0.1698 Loss after interation 14 is 0.1448 Loss after interation 15 is 0.1250 Loss after interation 16 is 0.1091 Loss after interation 17 is 0.0963 Loss after interation 18 is 0.0859 Loss after interation 19 is 0.0773 Loss after interation 20 is 0.0702 Loss after interation 21 is 0.0641 Loss after interation 22 is 0.0590 Loss after interation 23 is 0.0546 Loss after interation 24 is 0.0509 Loss after interation 25 is 0.0476 Loss after interation 26 is 0.0447 Loss after interation 27 is 0.0421 Loss after interation 28 is 0.0399 Loss after interation 29 is 0.0378 Loss after interation 30 is 0.0360 Loss after interation 31 is 0.0344 Loss after interation 32 is 0.0329 Loss after interation 33 is 0.0316 Loss after interation 34 is 0.0304 Loss after interation 35 is 0.0292 Loss after interation 36 is 0.0282 Loss after interation 37 is 0.0273 Loss after interation 38 is 0.0264 Loss after interation 39 is 0.0256 Loss after interation 40 is 0.0248 Loss after interation 41 is 0.0241 Loss after interation 42 is 0.0234 Loss after interation 43 is 0.0228 Loss after interation 44 is 0.0222 Loss after interation 45 is 0.0217 Loss after interation 46 is 0.0212 Loss after interation 47 is 0.0207 Loss after interation 48 is 0.0202 Loss after interation 49 is 0.0198 . plt.plot(nn.losses, color=&quot;salmon&quot;) plt.title(&quot;Loss per Iteration&quot;) plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;); . . Computing accuracy of our model . Let&#39;s check our model performance by computing the accuracy on the validation dataset . def comp_accuracy(preds, targs): &quot;&quot;&quot; Fn that computes the accuracy between the predicted values and the targets &quot;&quot;&quot; m = len(targs) p = np.zeros_like(preds) # convert probas to 0/1 predictions for i in range(len(preds)): if preds[i] &gt; 0.5: p[i] = 1 else: p[i] = 0 print(&quot;Accuracy: &quot; + str(np.sum((p == targs)/m))) . preds = nn.forward(x_valid, calc_loss=False) # compute accuracy comp_accuracy(preds, y_valid) . Accuracy: 0.9965936739659367 . . Note: Nice our model achieves a accuracy of 0.9965936739659367 on the validation set ! . Getting predictions from our model . test_inp = x_valid[0] plt.title(&quot;Input: &quot;) plt.imshow(test_inp.reshape(28,28), cmap=&quot;binary&quot;); loss, pred = nn.forward(test_inp) predicted_val = int(pred &gt; 0.5) print(f&quot;Predicted output: {predicted_val}&quot;) . . Predicted output: 0 . test_inp = x_valid[2000] plt.title(&quot;Input: &quot;) plt.imshow(test_inp.reshape(28,28), cmap=&quot;binary&quot;); loss, pred = nn.forward(test_inp) predicted_val = int(pred &gt; 0.5) print(f&quot;Predicted output: {predicted_val}&quot;) . . Predicted output: 1 . Summary: . We were able to create a model that can identify classify handwritten digits as either 1&#39;s or 0&#39;s | We successfully computed the forward and backward progation of a neural network from scratch. | . Thanks for reading ! .",
            "url": "https://benihime91.github.io/blog/deeplearning%20python3.x%20numpy/2020/09/22/nn-from-scratch.html",
            "relUrl": "/deeplearning%20python3.x%20numpy/2020/09/22/nn-from-scratch.html",
            "date": " • Sep 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://benihime91.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://benihime91.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://benihime91.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://benihime91.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}