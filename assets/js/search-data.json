{
  
    
        "post0": {
            "title": "TensorFlow Object Detection API Tutorial",
            "content": ". . Important: This guide is based on official tutorial and could intersect with this Tutorial from Roboflow-Team. . Introduction . In this notebook, we implement The TensorFlow 2 Object Detection Library for training on your own dataset. . We will take the following steps to implement a model from TensorFlow 2 Detection Model Zoo on our custom data: . Install TensorFlow2 Object Detection Dependencies | Download Custom TensorFlow2 Object Detection Dataset | Write Custom TensorFlow2 Object Detection Training Configuation | Train Custom TensorFlow2 Object Detection Model | Export Custom TensorFlow2 Object Detection Weights | Use Trained TensorFlow2 Object Detection For Inference on Test Images | . When you are done you will have a custom detector that you can use. It will make inference like this: . . Install TensorFlow2 Object Detection Dependencies . To install TensorFlow2 Object Detection on Google-Colab run the following steps. . import os import pathlib # Clone the tensorflow models repository if it doesn&#39;t already exist if &quot;models&quot; in pathlib.Path.cwd().parts: while &quot;models&quot; in pathlib.Path.cwd().parts: os.chdir(&#39;..&#39;) elif not pathlib.Path(&#39;models&#39;).exists(): !git clone --depth 1 https://github.com/tensorflow/models . # Install the Object Detection API %%bash cd models/research/ protoc object_detection/protos/*.proto --python_out=. cp object_detection/packages/tf2/setup.py . python -m pip install . --quiet . Run the TF2 model builder tests to make sure our environment is up and running. If successful If successful, you should see the following outputs at the end of the cell execution printouts. . [ RUN ] ModelBuilderTF2Test.test_unknown_ssd_feature_extractor [ OK ] ModelBuilderTF2Test.test_unknown_ssd_feature_extractor - Ran 20 tests in 52.705s OK (skipped=1) . #run model builder test to ensure everything is up and runnning !python /content/models/research/object_detection/builders/model_builder_tf2_test.py . To install on a custom machine check : Installation . Download the data: . For this task we are going to be using the Oxford Pets dataset. This dataset contains 37 category pet dataset with roughly 200 images for each class. The annotations contain tight bounding box (ROI) around the head of the animal. . #Download the Oxford-IIIT Pet !wget http://www.robots.ox.ac.uk/~vgg/data/pets/data/images.tar.gz !wget http://www.robots.ox.ac.uk/~vgg/data/pets/data/annotations.tar.gz !tar -xf annotations.tar.gz !tar -xf images.tar.gz . Before training let us create a folder /content/workspace/. . It is within the workspace that we will store all our training set-ups. This will contain all files related to our model training. . #We will store all the required files in the workspace folder !mkdir /content/workspace/ !mkdir /content/workspace/images/ # store images !mkdir /content/workspace/annotations/ # store xml annotation files !mkdir /content/workspace/images/train # train images !mkdir /content/workspace/images/test # test images !mkdir /content/workspace/annotations/train # train annotations !mkdir /content/workspace/annotations/test # test annotations !mkdir /content/workspace/data/ # directory to store the tf_records &amp; the label_map . import os import pathlib import logging import re import shutil import glob import pandas as pd import xml.etree.ElementTree as ET from tqdm import tqdm from sklearn.preprocessing import LabelEncoder from sklearn.model_selection import train_test_split import tarfile import time from collections import defaultdict from io import StringIO from matplotlib import pyplot as plt from PIL import Image from IPython.display import display import numpy as np IMAGE_DIR = &quot;/content/images&quot; ANNOT_DIR = &quot;/content/annotations/xmls&quot; pd.set_option(&quot;display.max_colwidth&quot;, None) os.chdir(&quot;/content/&quot;) %load_ext tensorboard %load_ext autoreload %matplotlib inline %autoreload 2 . import tensorflow.compat.v1 as tf1 import contextlib2 import tensorflow as tf from object_detection.utils import dataset_util from object_detection.utils import label_map_util from object_detection.utils import config_util from object_detection.utils import visualization_utils as viz_utils from object_detection.utils import colab_utils from object_detection.builders import model_builder from object_detection.dataset_tools import tf_record_creation_util # Enable GPU dynamic memory allocation gpus = tf.config.experimental.list_physical_devices(&#39;GPU&#39;) for gpu in gpus: tf.config.experimental.set_memory_growth(gpu, True) . Prepare Tensorflow 2 Object Detection Training Data . Tensorflow object detection API expects the data to be in the form of TFRecords . In this part we are going to convert our data present in Pascal-VOC format into TFRecords. . To do this we will implement the following the steps: . Iterate over all the annotations and partition the annotations into train and test datasets. The train annotatins and images will be saved to /content/workspace/annotations/train &amp; /content/workspace/images/train respectively. Similarly the test data will be saved to /content/workspace/annotations/test &amp; /content/workspace/images/test . . | Convert all the *.xml annotation files into a single Pandas DataFrame object. . | We will create a tensoflow 2 object detection format label-map which will be used in training/evaluation the model . . | Use this Pandas DataFrame to create TFRecords for the train and test datasets. The TFRecords will be saved to /content/workspace/data/. . | . 1. Partition the Dataset : . If we look at the data that is saved in /content/images/ &amp; /content/annotations/ we will see that not all the images have the corresponding annotations and the images and annotations are saved as {filename}.jpeg &amp; {filename}.xml respectively. . What we will do is we will first split the images using sklearn.train_test_split into a train and test dataset. Then we will check for the corresponding annotation for the image . If the annotation file exists we will copy the image and annotation into their repectives directories under /content/workspace . . all_images = os.listdir(IMAGE_DIR) #Split the images into train and test datasets train_images, test_images = train_test_split(all_images, test_size=0.2, random_state = 123) #Grab the list of all the annotations for the train and test images #Some annotations may not exist we will filter these in the next cell train_xmls = [f.split(&quot;.&quot;)[0] + &quot;.xml&quot; for f in train_images] test_xmls = [f.split(&quot;.&quot;)[0] + &quot;.xml&quot; for f in test_images ] . def move_file(fileList : list, src: str, dest: str): &quot;&quot;&quot; This Fn copy&#39;s files from a given fileList from src to dest if the file exits. Args: fileList: List containing all the files present in the src directory. src : source directory for the files. dest : destination where to copy the files present in fileList. &quot;&quot;&quot; for f in tqdm(fileList): fileName = os.path.join(src, f) #Check if the file exits, if the file exits copy contents from src to dest if os.path.exists(fileName): shutil.copy2(src=fileName, dst=os.path.join(dest, f)) #Move images and annotations to workspace directory move_file(train_images, src=IMAGE_DIR, dest=&quot;/content/workspace/images/train/&quot;) move_file(test_images, src=IMAGE_DIR, dest=&quot;/content/workspace/images/test/&quot;) move_file(train_xmls, src=ANNOT_DIR, dest=&quot;/content/workspace/annotations/train/&quot;) move_file(test_xmls, src=ANNOT_DIR, dest=&quot;/content/workspace/annotations/test/&quot;) . 100%|██████████| 5914/5914 [00:02&lt;00:00, 2955.61it/s] 100%|██████████| 1479/1479 [00:00&lt;00:00, 2300.28it/s] 100%|██████████| 5914/5914 [00:00&lt;00:00, 15798.62it/s] 100%|██████████| 1479/1479 [00:00&lt;00:00, 18011.92it/s] . 2. Create Pandas DataFrame Object : . Now, that we have partitioned our dataset and the images/annotations are present in the repective directories we will now create a pandas dataframe from the *.xml files . The DataFrame will contrain the fillowing information: . filename (str): Path to the image file. | width (float/int): Absolute width of the image. | height (float/int): Absolute height of the image. | labels (str): The class of the object present in the bounding box. | xmin (float/int): Absolute xmin co-ordinate for the bounding box. | ymin (float/int): Absolute ymin co-ordinate for the bounding box. | xmax (float/int): Absolute xmax co-ordinate for the bounding box. | ymax (float/int): Absolute ymax co-ordinate for the bounding box. | encoded_label (int): The label for the object in the bounding box. 0 represents always the background class. | . #from the filename. exp = r&quot;/([^/]+)_ d+.jpg$&quot; exp = re.compile(exp) #sklearn.LabelEncoder will be used to convert the class of the object into integer format. le = LabelEncoder() def xml2pandas(annot_dir): &quot;&quot;&quot; Fn converts the xml files into a pandas dataframe. Args: annot_dir: Directory where all the *.xml annotation files are stored &quot;&quot;&quot; xml_list = [] for xml_file in tqdm(glob.glob(annot_dir + &#39;/*.xml&#39;)): tree = ET.parse(xml_file) root = tree.getroot() for member in root.findall(&#39;object&#39;): value = ( root.find(&#39;filename&#39;).text, int(root.find(&#39;size&#39;)[0].text), int(root.find(&#39;size&#39;)[1].text), member[0].text, int(member[4][0].text), int(member[4][1].text), int(member[4][2].text), int(member[4][3].text) ) xml_list.append(value) column_name = [&#39;filename&#39;, &#39;width&#39;, &#39;height&#39;,&#39;labels&#39;, &#39;xmin&#39;, &#39;ymin&#39;, &#39;xmax&#39;, &#39;ymax&#39;] xml_df = pd.DataFrame(xml_list, columns=column_name) logging.info(&quot;DataFrame Generated ! &quot;) return xml_df def process_data(annotDir, imageDir, image_set=&quot;train&quot;): &quot;&quot;&quot; Fn creates a pandas DataFrame object from the annotation in annotDir and images in imageDir. This Fn also extracts the name of the class from the filename and converts it into integer labels starting from 1 as 0 is reserved for the background class always. Args: annotDir : directory where the *.xml annotation files are stored. imageDir : directory where all the images are stored. image_set : one of either `train` or `test`, this use when converting the class objects into integer formats. &quot;&quot;&quot; data = xml2pandas(annotDir) #modify the filename to point to the original filename data.filename = [os.path.join(imageDir, fname) for fname in data.filename.values] #extract the class labels from the filenames data[&quot;labels&quot;] = [exp.search(data.filename[idx]).group(1).lower() for idx in range(len(data))] #encoded the labels into integers starting from 1 if image_set == &quot;train&quot; : data[&quot;encoded_label&quot;] = le.fit_transform(data.labels) + 1 elif image_set == &quot;test&quot; : data[&quot;encoded_label&quot;] = le.transform(data.labels) + 1 return data . TRAIN_IMAGE_DIR = &quot;/content/workspace/images/train/&quot; TEST_IMAGE_DIR = &quot;/content/workspace/images/test/&quot; TRAIN_ANNOTATION_DIR = &quot;/content/workspace/annotations/train/&quot; TEST_ANNOTATION_DIR = &quot;/content/workspace/annotations/test/&quot; #Create pandas datafame from the *.xml files train_data = process_data(TRAIN_ANNOTATION_DIR, TRAIN_IMAGE_DIR, &quot;train&quot;) test_data = process_data(TEST_ANNOTATION_DIR, TEST_IMAGE_DIR, &quot;test&quot;) . 100%|██████████| 2982/2982 [00:08&lt;00:00, 356.66it/s] 100%|██████████| 706/706 [00:01&lt;00:00, 704.56it/s] . #Cross check for missing files for f in train_data.filename: if not os.path.exists(f): #remove the missing file print(f&quot;{f} is missing in train_data&quot;) train_data = train_data[train_data.filename != f] train_data.reset_index(inplace=True, drop=True) for f in test_data.filename: if not os.path.exists(f): #remove the missing file print(f&quot;{f} missing in test_data&quot;) test_data = test_data[test_data.filename != f] test_data.reset_index(inplace=True, drop=True) . Our datasets are going to look something like this : . The train_data : . filename width height labels xmin ymin xmax ymax encoded_label . 0 /content/workspace/images/train/Persian_191.jpg | 500 | 333 | persian | 229 | 36 | 315 | 132 | 24 | . 1 /content/workspace/images/train/beagle_18.jpg | 336 | 500 | beagle | 43 | 31 | 291 | 204 | 5 | . 2 /content/workspace/images/train/Sphynx_192.jpg | 500 | 333 | sphynx | 334 | 20 | 412 | 109 | 34 | . 3 /content/workspace/images/train/boxer_181.jpg | 500 | 333 | boxer | 259 | 8 | 362 | 112 | 9 | . 4 /content/workspace/images/train/Birman_126.jpg | 334 | 500 | birman | 78 | 135 | 180 | 239 | 7 | . The test_data : . filename width height labels xmin ymin xmax ymax encoded_label . 0 /content/workspace/images/test/Siamese_131.jpg | 500 | 423 | siamese | 14 | 16 | 385 | 348 | 33 | . 1 /content/workspace/images/test/Bombay_115.jpg | 600 | 428 | bombay | 44 | 87 | 234 | 335 | 8 | . 2 /content/workspace/images/test/Abyssinian_140.jpg | 500 | 333 | abyssinian | 231 | 87 | 323 | 154 | 1 | . 3 /content/workspace/images/test/Russian_Blue_124.jpg | 500 | 375 | russian_blue | 29 | 25 | 164 | 159 | 28 | . 4 /content/workspace/images/test/basset_hound_179.jpg | 500 | 375 | basset_hound | 152 | 162 | 340 | 317 | 4 | . 3. Create Label Map : . TensorFlow requires dataset to have a label map associated with it. This label map defines a mapping from string class names to integer class Ids. The label map should be a StringIntLabelMap text protobuf. Label map files have the extention .pbtxt and we will place it under /content/workspace/data along with the TFRecod files which we will create in the next step. . unique_labels = list(train_data.labels.unique()) integer_labels = le.transform(unique_labels) + 1 label_dict = {unique_labels[i] : integer_labels[i] for i in range(len(unique_labels))} label_map = &quot;/content/workspace/data/label_map.pbtxt&quot; categories = train_data.labels.unique() categories.sort() end = &#39; n&#39; s = &#39; &#39; for name in categories: out = &#39;&#39; out += &#39;item&#39; + s + &#39;{&#39; + end out += s*2 + &#39;id:&#39; + &#39; &#39; + (str(label_dict[name])) + end out += s*2 + &#39;name:&#39; + &#39; &#39; + &#39; &#39;&#39; + name + &#39; &#39;&#39; + end out += &#39;}&#39; + end*2 with open(label_map, &#39;a&#39;) as f: f.write(out) . Our label_map.pbtxt file will look like this : . item { id: 1 name: &#39;abyssinian&#39; } item { id: 2 name: &#39;american_bulldog&#39; } item { id: 3 name: &#39;american_pit_bull_terrier&#39; } item { id: 4 name: &#39;basset_hound&#39; } ... ... . The label_map.pbtxt file has been placed under /content/workspace/data/label_map.pbtxt . 4. Create TensorFlow Records : . In this step we will convert our annotatinos present in the pandas dataframe object into TFRecord format. . For every example in our dataset, we should have the following information: . An RGB image for the dataset encoded as jpeg or png. | A bounding box coordinates for each image (with origin in top left corner) defined by 4 floating point numbers [ymin, xmin, ymax, xmax]. | The class of the object in the bounding box. | . . Note: For the bounding-boxes, the normalized coordinates (x / width, y / height) are stored in the TFRecord dataset. . Since our dataset has more than a fairly large number of annotations we will shard your dataset into multiple files. Instead of writing all tf.Example protos to a single file we will store the dataset into multiple files . . Our dataset is going to look something like this: . /{directory_path}/dataset.record-00000-00010 /{directory_path}/dataset.record-00001-00010 ... /{directory_path}/dataset.record-00009-00010 . Our train dataset is going to be stored as : . /content/workspace/data/train.record-00000-of-00010 /content/workspace/data/train.record-00001-of-00010 ... /content/workspace/data/train.record-00009-of-00010 . Similary for the test dataset : . /content/workspace/data/test.record-00000-of-00010 /content/workspace/data/test.record-00001-of-00010 ... /content/workspace/data/test.record-00009-of-00010 . def create_tf_example(fname, data): &quot;&quot;&quot; Creates a tf.Example proto from a single image from the given data Args: fname: filename of a single image from data. data : a pandas dataframe object in the format specified in step 2. Returns: example: The created tf.Example. &quot;&quot;&quot; curr_data = data.loc[data.filename == fname] filename = fname.encode(&#39;utf8&#39;) # Filename of the image height = curr_data[&quot;height&quot;].values[0] # Image height width = curr_data[&quot;width&quot;].values[0] # Image width image_format = b&#39;jpeg&#39; # b&#39;jpeg&#39; or b&#39;png&#39; # List of normalized left x coordinates in bounding box (1 per box). xmins = list(curr_data[&quot;xmin&quot;].values / width) # List of normalized right x coordinates in bounding box (1 per box). xmaxs = list(curr_data[&quot;xmax&quot;].values / width) # List of normalized top y coordinates in bounding box (1 per box). ymins = list(curr_data[&quot;ymin&quot;].values / height) # List of normalized bottom y coordinates in bounding box (1 per box). ymaxs = list(curr_data[&quot;ymax&quot;].values / height) # List of string class name of bounding box (1 per box) classes_text = list(curr_data[&quot;labels&quot;].values) classes_text = [text.encode(&#39;utf8&#39;) for text in classes_text] # List of integer class id of bounding box (1 per box) classes = list(curr_data[&quot;encoded_label&quot;].values) with tf1.gfile.GFile(filename, &#39;rb&#39;) as fid: encoded_image_data = fid.read() # Encoded image bytes features = tf1.train.Example(features=tf1.train.Features(feature={ &#39;image/height&#39;: dataset_util.int64_feature(height), &#39;image/width&#39;: dataset_util.int64_feature(width), &#39;image/filename&#39;: dataset_util.bytes_feature(filename), &#39;image/source_id&#39;: dataset_util.bytes_feature(filename), &#39;image/encoded&#39;: dataset_util.bytes_feature(encoded_image_data), &#39;image/format&#39;: dataset_util.bytes_feature(image_format), &#39;image/object/bbox/xmin&#39;: dataset_util.float_list_feature(xmins), &#39;image/object/bbox/xmax&#39;: dataset_util.float_list_feature(xmaxs), &#39;image/object/bbox/ymin&#39;: dataset_util.float_list_feature(ymins), &#39;image/object/bbox/ymax&#39;: dataset_util.float_list_feature(ymaxs), &#39;image/object/class/text&#39;: dataset_util.bytes_list_feature(classes_text), &#39;image/object/class/label&#39;: dataset_util.int64_list_feature(classes), })) return features def create_records(output_path, data, shards=10): &quot;&quot;&quot; Fn iterates over all the annotations in dataset and creates a sharded TFRecord dataset and additionally saves the sharded TFRecord dataset to output path. Args: output_path: Path where to save the dataset data : A pandas Dataframe object as specified in step-2. shards : Number of the shards over which to save the dataset. The dataset is going to saved inside `shards` no. of files. &quot;&quot;&quot; writer = tf1.python_io.TFRecordWriter(output_path) fnames = list(data.filename.unique()) with contextlib2.ExitStack() as tf_record_close_stack: output_tfrecords = tf_record_creation_util.open_sharded_output_tfrecords(tf_record_close_stack,output_path,shards) #enumerate over all the unique images present in the dataset #and create a tf.Example proto for the particular annotations. for index, fname in enumerate(fnames): tf_example = create_tf_example(fname, data) output_shard_index = index % shards output_tfrecords[output_shard_index].write(tf_example.SerializeToString()) . print(&quot;Creating TFRecords ..... &quot;, end=&#39;&#39;) start_time = time.time() create_records(&quot;/content/workspace/data/train.record&quot;, data=train_data) create_records(&quot;/content/workspace/data/test.record&quot;, data=test_data ) end_time = time.time() elapsed_time = end_time - start_time print(&#39;Done! Took {} seconds&#39;.format(elapsed_time)) . Creating TFRecords ..... Done! Took 4.879507780075073 seconds . Our dataset is now prepared for training using a model from TensorFlow 2 Detection Model Zoo . . The directory structure for the workspace should look something like this at this stage: . /content/workspace ├── annotations │   ├── test [706 entries exceeds filelimit, not opening dir] │   └── train [2982 entries exceeds filelimit, not opening dir] ├── data │   ├── label_map.pbtxt │   ├── test.record │   ├── test.record-00000-of-00010 │   ├── test.record-00001-of-00010 │   ├── test.record-00002-of-00010 │   ├── test.record-00003-of-00010 │   ├── test.record-00004-of-00010 │   ├── test.record-00005-of-00010 │   ├── test.record-00006-of-00010 │   ├── test.record-00007-of-00010 │   ├── test.record-00008-of-00010 │   ├── test.record-00009-of-00010 │   ├── train.record │   ├── train.record-00000-of-00010 │   ├── train.record-00001-of-00010 │   ├── train.record-00002-of-00010 │   ├── train.record-00003-of-00010 │   ├── train.record-00004-of-00010 │   ├── train.record-00005-of-00010 │   ├── train.record-00006-of-00010 │   ├── train.record-00007-of-00010 │   ├── train.record-00008-of-00010 │   └── train.record-00009-of-00010 └── images ├── test [1479 entries exceeds filelimit, not opening dir] └── train [5914 entries exceeds filelimit, not opening dir] 7 directories, 23 files . Configure Custom TensorFlow2 Object Detection Training Configuration . In this section we will download a pretrained-model from the TF2 OD model zoo and set up out training configuration. . In this tutorial we are going to implement the lightweight, smallest state of the art efficientdet model. . We will create a directory call pretrained-models in our wokspace folder. . We will download the latest pre-trained network for the model we wish to use. This can be in TensorFlow 2 Detection Model Zoo. . Once the *.tar.gz file has been downloaded, we will extract the file contents into. /content/workspace/pre-trained-models . . # Download the latest-pretrained weights for the efficientdet_d0 model and the config file #LINK : http://download.tensorflow.org/models/object_detection/tf2/20200711/efficientdet_d0_coco17_tpu-32.tar.gz model_name = &quot;efficientdet_d0_coco17_tpu-32&quot; model = &quot;efficientdet_d0_coco17_tpu-32.tar.gz&quot; os.makedirs(&quot;/content/workspace/pre_trained_models/&quot;, exist_ok=True) download_tar = f&quot;http://download.tensorflow.org/models/object_detection/tf2/20200711/{model}&quot; !wget {download_tar} -P &quot;/content/workspace/pre_trained_models/&quot; tar = tarfile.open(f&quot;/content/workspace/pre_trained_models/{model}&quot;) tar.extractall(path=&quot;/content/workspace/pre_trained_models/&quot;) tar.close() os.unlink(f&quot;/content/workspace/pre_trained_models/{model}&quot;) . The directory structure for the workspace should look something like this at this stage: . /content/workspace ├── annotations │   ├── test [706 entries exceeds filelimit, not opening dir] │   └── train [2982 entries exceeds filelimit, not opening dir] ├── data │   ├── label_map.pbtxt │   ├── test.record │   ├── test.record-00000-of-00010 │   ├── test.record-00001-of-00010 │   ├── test.record-00002-of-00010 │   ├── test.record-00003-of-00010 │   ├── test.record-00004-of-00010 │   ├── test.record-00005-of-00010 │   ├── test.record-00006-of-00010 │   ├── test.record-00007-of-00010 │   ├── test.record-00008-of-00010 │   ├── test.record-00009-of-00010 │   ├── train.record │   ├── train.record-00000-of-00010 │   ├── train.record-00001-of-00010 │   ├── train.record-00002-of-00010 │   ├── train.record-00003-of-00010 │   ├── train.record-00004-of-00010 │   ├── train.record-00005-of-00010 │   ├── train.record-00006-of-00010 │   ├── train.record-00007-of-00010 │   ├── train.record-00008-of-00010 │   └── train.record-00009-of-00010 ├── images │   ├── test [1479 entries exceeds filelimit, not opening dir] │   └── train [5914 entries exceeds filelimit, not opening dir] └── pre_trained_models └── efficientdet_d0_coco17_tpu-32 ├── checkpoint │   ├── checkpoint │   ├── ckpt-0.data-00000-of-00001 │   └── ckpt-0.index ├── pipeline.config └── saved_model ├── assets ├── saved_model.pb └── variables ├── variables.data-00000-of-00001 └── variables.index 13 directories, 30 files . Now that we have downloaded and extracted our pre-trained model, let’s create a directory for our training job. Under the /content/workspace/ create a new directory named models this will be the folder where we will store all the configurations, model_checkpoints, logs for our custom trained model. . Under the /content/workspace/models/ dir create a dir named as efficientdet_d0_coco17_tpu-32 and copy the /content/workspace/pre-trained-models/efficientdet_d0_coco17_tpu-32/pipeline.config file inside the newly created directory. . os.makedirs(&quot;/content/workspace/models/&quot;, exist_ok=True) os.makedirs(f&quot;/content/workspace/models/{model_name}&quot;, exist_ok=True) config_path = f&quot;/content/workspace/pre_trained_models/{model_name}/pipeline.config&quot; shutil.copy2(config_path, f&quot;/content/workspace/models/{model_name}&quot;) . &#39;/content/workspace/models/efficientdet_d0_coco17_tpu-32/pipeline.config&#39; . Each model has a model_name, a pipeline.config file, a pretrained_checkpoint. . The pipeline.config file is a shell of a training configuration specific to each model type, provided by the authors of the TF2 OD repository. . The pretrained_checkpoint is the location of a pretrained weights file saved from when the object detection model was pretrained on the COCO dataset. . We will start from these weights, and then fine tune into our particular custom dataset task. By using pretraining, our model does not need to start from square one in identifying what features might be useful for object detection. . We will map our training data files to variables for use in our computer vision training pipeline configuration. . We will now edit the /content/workspace/models/pipeline.config to point to our custom data, the pretrained_checkpoint, and we also specify some training parameters. . test_record_fname = &quot;/content/workspace/data/test.record-?????-of-00010&quot; train_record_fname = &quot;/content/workspace/data/train.record-?????-of-00010&quot; #Path to the TensorFlow Object Detection format label_map label_map_pbtxt_fname = &quot;/content/workspace/data/label_map.pbtxt&quot; #Path to the pipeline.config file config_path = f&quot;/content/workspace/models/{model_name}/pipeline.config&quot; #Path to the pretrained model checkpoints fine_tune = f&quot;/content/workspace/pre_trained_models/{model_name}/checkpoint/ckpt-0&quot; #if you can fit a large batch in memory, it may speed up your training batch_size = 16 #The more steps, the longer the training epochs = 30 num_steps = len(train_data) // batch_size * epochs model_dir = f&quot;/content/workspace/models/{model_name}&quot; def get_num_classes(pbtxt_fname): &quot;&quot;&quot;Get total number of classes from label_map.pbtxt file&quot;&quot;&quot; label_map = label_map_util.load_labelmap(pbtxt_fname) categories = label_map_util.convert_label_map_to_categories( label_map, max_num_classes=90, use_display_name=True) category_index = label_map_util.create_category_index(categories) return len(category_index.keys()) num_classes = get_num_classes(label_map_pbtxt_fname) print(&quot;CUSTOM CONFIGURATION PARAMETERS : &quot;) print(&quot;-&quot;*40) print(&quot;Config Path: &quot;, config_path) print(&quot;Checkpoint Path: &quot;, fine_tune) print(&quot;Label Map: &quot;, label_map_pbtxt_fname) print(&quot;Train TFRecords: &quot;, train_record_fname) print(&quot;Test TFRecords: &quot;, test_record_fname) print(&quot;Total Steps: &quot;, num_steps) print(&quot;Num classes: &quot;, num_classes) print(&quot;-&quot;*40) . CUSTOM CONFIGURATION PARAMETERS : - Config Path: /content/workspace/models/efficientdet_d0_coco17_tpu-32/pipeline.config Checkpoint Path: /content/workspace/pre_trained_models/efficientdet_d0_coco17_tpu-32/checkpoint/ckpt-0 Label Map: /content/workspace/data/label_map.pbtxt Train TFRecords: /content/workspace/data/train.record-?????-of-00010 Test TFRecords: /content/workspace/data/test.record-?????-of-00010 Total Steps: 5580 Num classes: 37 - . with open(config_path) as f: s = f.read() with open(config_path, &#39;w&#39;) as f: # fine_tune_checkpoint s = re.sub(&#39;fine_tune_checkpoint: &quot;.*?&quot;&#39;, &#39;fine_tune_checkpoint: &quot;{}&quot;&#39;.format(fine_tune), s) # tfrecord files train and test s = re.sub(&#39;(input_path: &quot;.*?)(PATH_TO_BE_CONFIGURED/train)(.*?&quot;)&#39;, &#39;input_path: &quot;{}&quot;&#39;.format(train_record_fname), s) s = re.sub(&#39;(input_path: &quot;.*?)(PATH_TO_BE_CONFIGURED/val)(.*?&quot;)&#39;, &#39;input_path: &quot;{}&quot;&#39;.format(test_record_fname), s) # label_map_path s = re.sub(&#39;label_map_path: &quot;.*?&quot;&#39;, &#39;label_map_path: &quot;{}&quot;&#39;.format(label_map_pbtxt_fname), s) # Set training batch_size. s = re.sub(&#39;batch_size: [0-9]+&#39;,&#39;batch_size: {}&#39;.format(batch_size), s) # Set training steps, num_steps s = re.sub(&#39;num_steps: [0-9]+&#39;, &#39;num_steps: {}&#39;.format(num_steps), s) # Set number of classes num_classes. s = re.sub(&#39;num_classes: [0-9]+&#39;,&#39;num_classes: {}&#39;.format(num_classes), s) #fine-tune checkpoint type s = re.sub(&#39;fine_tune_checkpoint_type: &quot;classification&quot;&#39;, &#39;fine_tune_checkpoint_type: &quot;{}&quot;&#39;.format(&#39;detection&#39;), s) f.write(s) . The modified config file will be saved as /content/workspace/models/efficientdet_d0_coco17_tpu-32/pipeline.config . Let&#39;s check the directory structure : . /content/workspace ├── annotations │   ├── test [706 entries exceeds filelimit, not opening dir] │   └── train [2982 entries exceeds filelimit, not opening dir] ├── data │   ├── label_map.pbtxt │   ├── test.record │   ├── test.record-00000-of-00010 │   ├── test.record-00001-of-00010 │   ├── test.record-00002-of-00010 │   ├── test.record-00003-of-00010 │   ├── test.record-00004-of-00010 │   ├── test.record-00005-of-00010 │   ├── test.record-00006-of-00010 │   ├── test.record-00007-of-00010 │   ├── test.record-00008-of-00010 │   ├── test.record-00009-of-00010 │   ├── train.record │   ├── train.record-00000-of-00010 │   ├── train.record-00001-of-00010 │   ├── train.record-00002-of-00010 │   ├── train.record-00003-of-00010 │   ├── train.record-00004-of-00010 │   ├── train.record-00005-of-00010 │   ├── train.record-00006-of-00010 │   ├── train.record-00007-of-00010 │   ├── train.record-00008-of-00010 │   └── train.record-00009-of-00010 ├── images │   ├── test [1479 entries exceeds filelimit, not opening dir] │   └── train [5914 entries exceeds filelimit, not opening dir] ├── models │   └── efficientdet_d0_coco17_tpu-32 │   └── pipeline.config └── pre_trained_models └── efficientdet_d0_coco17_tpu-32 ├── checkpoint │   ├── checkpoint │   ├── ckpt-0.data-00000-of-00001 │   └── ckpt-0.index ├── pipeline.config └── saved_model ├── assets ├── saved_model.pb └── variables ├── variables.data-00000-of-00001 └── variables.index 15 directories, 31 files . Train Custom TF2 Object Detector . To initiate a new training job, we need to run the script /content/models/research/object_detection/model_main_tf2.py . config_path: path to the configuration file defined above in writing custom training configuration. . | model_dir: the location tensorboard logs and saved model checkpoints will save to . | . !python /content/models/research/object_detection/model_main_tf2.py --pipeline_config_path={config_path} --num_train_steps={num_steps} --model_dir={model_dir} --alsologtostderr . To evaluate our model on COCO-Evaluation metrics we need to run the script /content/models/research/object_detection/model_main_tf2.py . . Note: This process automatically evaluates the model on the latest checkpoints that the training job generates. So we can also run this script in the backgound as our model keeps training and as checkpoints are generated the script will automatically evaluate the model on the COCO-metrics. . !python /content/models/research/object_detection/model_main_tf2.py --pipeline_config_path={config_path} --model_dir={model_dir} --checkpoint_dir={model_dir} --alsologtostderr --eval_timeout=10 . Monitor Training Job Progress using TensorBoard: . We can either use one of the 2 commands: . To open in a terminal : . tensorboard --logdir &quot;/content/workspace/models/efficientdet_d0_coco17_tpu-32/ . For a Jupyter-Environment: . %load_ext tensorboard %tensorboard --logdir &quot;/content/workspace/models/efficientdet_d0_coco17_tpu-32/&quot; . We will have logs that are going to look similar to this : . . Exporting a Trained Inference Graph . Once your training job is complete, you need to extract the newly trained inference graph, which will be later used to perform the object detection. This can be done as follows: . %ls &quot;/content/workspace/models/efficientdet_d0_coco17_tpu-32/&quot; . checkpoint ckpt-3.index ckpt-6.index ckpt-1.data-00000-of-00001 ckpt-4.data-00000-of-00001 eval/ ckpt-1.index ckpt-4.index pipeline.config ckpt-2.data-00000-of-00001 ckpt-5.data-00000-of-00001 train/ ckpt-2.index ckpt-5.index ckpt-3.data-00000-of-00001 ckpt-6.data-00000-of-00001 . # using the /content/models/research/object_detection/exporter_main_v2.py given by TensorFlow Team # we will export our model into a model graph in this folder created os.makedirs(f&quot;/content/workspace/exported_models/{model_name}&quot;, exist_ok=True) . #Once your training job is complete, you need to extract the newly trained inference graph, #which will be later used to perform the object detection #path to save the exporter inference graph output_directory = f&quot;/content/workspace/exported_models/{model_name}/&quot; #path to trained model checkpoints checkpoint_dir = f&quot;/content/workspace/models/{model_name}/&quot; #run script to export model weights !python /content/models/research/object_detection/exporter_main_v2.py --trained_checkpoint_dir {checkpoint_dir} --output_directory {output_directory} --pipeline_config_path {config_path} . After the whole process (Training/Evaluating/Exporting) we are going to have the following files in the folwwing folders: . /content/workspace ├── annotations │   ├── test [706 entries exceeds filelimit, not opening dir] │   └── train [2982 entries exceeds filelimit, not opening dir] ├── data [23 entries exceeds filelimit, not opening dir] ├── exported_models │   └── efficientdet_d0_coco17_tpu-32 │   ├── checkpoint │   │   ├── checkpoint │   │   ├── ckpt-0.data-00000-of-00001 │   │   └── ckpt-0.index │   ├── pipeline.config │   └── saved_model │   ├── assets │   ├── saved_model.pb │   └── variables │   ├── variables.data-00000-of-00001 │   └── variables.index ├── images │   ├── test [1479 entries exceeds filelimit, not opening dir] │   └── train [5914 entries exceeds filelimit, not opening dir] ├── models │   └── efficientdet_d0_coco17_tpu-32 │   ├── checkpoint │   ├── ckpt-1.data-00000-of-00001 │   ├── ckpt-1.index │   ├── ckpt-2.data-00000-of-00001 │   ├── ckpt-2.index │   ├── ckpt-3.data-00000-of-00001 │   ├── ckpt-3.index │   ├── ckpt-4.data-00000-of-00001 │   ├── ckpt-4.index │   ├── ckpt-5.data-00000-of-00001 │   ├── ckpt-5.index │   ├── ckpt-6.data-00000-of-00001 │   ├── ckpt-6.index │   ├── eval │   │   └── events.out.tfevents.1604410855.57f7c64792d3.12442.7946.v2 │   ├── pipeline.config │   └── train │   └── events.out.tfevents.1604404487.57f7c64792d3.556.10071.v2 └── pre_trained_models └── efficientdet_d0_coco17_tpu-32 ├── checkpoint │   ├── checkpoint │   ├── ckpt-0.data-00000-of-00001 │   └── ckpt-0.index ├── pipeline.config └── saved_model ├── assets ├── saved_model.pb └── variables ├── variables.data-00000-of-00001 └── variables.index 23 directories, 30 files . In the next part we are going to use this exported graph to do inference on custom images . Run Inference on Test Images with Custom TensorFlow2 Object Detector . In this section we will run inference on images using our Custom TensorFlow2 Object Detector exported graph . To run inference we will create a few helper functions first: . def load_image_into_numpy_array(path): &quot;&quot;&quot;Load an image from file into a numpy array. Puts image into numpy array to feed into tensorflow graph. Note that by convention we put it into a numpy array with shape (height, width, channels), where channels=3 for RGB. Args: path: the file path to the image Returns: uint8 numpy array with shape (img_height, img_width, 3) &quot;&quot;&quot; img_data = tf.io.gfile.GFile(path, &#39;rb&#39;).read() image = Image.open(BytesIO(img_data)) (im_width, im_height) = image.size return np.array(image.getdata()).reshape((im_height, im_width, 3)).astype(np.uint8) def load_model(model_dir): model_dir = pathlib.Path(model_dir)/&quot;saved_model&quot; model = tf.saved_model.load(str(model_dir)) return model . Load in the category_index, which is a dictionary mapping of the classes and the index labels &amp; the Custom TensorFlow2 Object Detector from the exported graph . PATH_TO_LABELS = &quot;/content/workspace/data/label_map.pbtxt&quot; #generate a category index dictionary from the label map category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True) #path to the images from the test directory we will reun inference on these images PATH_TO_TEST_IMAGES_DIR = pathlib.Path(&quot;/content/workspace/images/test/&quot;) TEST_IMAGE_PATHS = sorted(list(PATH_TO_TEST_IMAGES_DIR.glob(&quot;*.jpg&quot;))) exported_model_path = f&quot;/content/workspace/exported_models/{model_name}&quot; #Load model from the exported model graph print(f&#39;Loading model from {exported_model_path} ...&#39;, end=&#39;&#39;) start_time = time.time() detection_model = load_model(exported_model_path) end_time = time.time() elapsed_time = end_time - start_time print(&#39;Done! Took {} seconds&#39;.format(elapsed_time)) . Loading model from /content/workspace/exported_models/efficientdet_d0_coco17_tpu-32 ...Done! Took 24.72133469581604 seconds . def run_inference_for_single_image(model, image): &quot;&quot;&quot; Fn to run inference on a single image &quot;&quot;&quot; image = np.asarray(image) # The input needs to be a tensor, convert it using `tf.convert_to_tensor`. input_tensor = tf.convert_to_tensor(image) # The model expects a batch of images, so add an axis with `tf.newaxis`. input_tensor = input_tensor[tf.newaxis,...] # Run inference model_fn = model.signatures[&#39;serving_default&#39;] output_dict = model_fn(input_tensor) # All outputs are batches tensors. # Convert to numpy arrays, and take index [0] to remove the batch dimension # We&#39;re only interested in the first num_detections. num_detections = int(output_dict.pop(&#39;num_detections&#39;)) output_dict = {key:value[0, :num_detections].numpy() for key,value in output_dict.items()} output_dict[&#39;num_detections&#39;] = num_detections # detection_classes should be ints. output_dict[&#39;detection_classes&#39;] = output_dict[&#39;detection_classes&#39;].astype(np.int64) # Handle models with masks if &#39;detection_masks&#39; in output_dict: # Reframe the the bbox mask to the image size. detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks( output_dict[&#39;detection_masks&#39;], output_dict[&#39;detection_boxes&#39;], image.shape[0], image.shape[1] ) detection_masks_reframed = tf.cast(detection_masks_reframed &gt; 0.5, tf.uint8) output_dict[&#39;detection_masks_reframed&#39;] = detection_masks_reframed.numpy() return output_dict def show_inference(model, image_path, threshold = 0.5): &quot;&quot;&quot; Runs infernce on the given image at the image_path and also draws the bounding box over the image . &quot;&quot;&quot; # the array based representation of the image will be used later in order to prepare the # result image with boxes and labels on it. print(&#39;Running inference for {}... &#39;.format(image_path), end=&#39;&#39;) image_np = np.array(Image.open(image_path)) # Actual detection. output_dict = run_inference_for_single_image(model, image_np) # Visualization of the results of a detection. viz_utils.visualize_boxes_and_labels_on_image_array( image_np, output_dict[&#39;detection_boxes&#39;], output_dict[&#39;detection_classes&#39;], output_dict[&#39;detection_scores&#39;], category_index, instance_masks=output_dict.get(&#39;detection_masks_reframed&#39;, None), use_normalized_coordinates=True, max_boxes_to_draw=100, min_score_thresh=threshold, ) print(&#39;Done !&#39;) display(Image.fromarray(image_np)) . Using the helper functions defined above let&#39;s run inference on Images : . path = TEST_IMAGE_PATHS[np.random.randint(0, len(TEST_IMAGE_PATHS))] #Run inference over the image and display the results show_inference(detection_model, path) . Running inference for /content/workspace/images/test/newfoundland_112.jpg... Done ! . path = TEST_IMAGE_PATHS[np.random.randint(0, len(TEST_IMAGE_PATHS))] #Run inference over the image and display the results show_inference(detection_model, path) . Running inference for /content/workspace/images/test/boxer_93.jpg... Done ! . path = TEST_IMAGE_PATHS[np.random.randint(0, len(TEST_IMAGE_PATHS))] #Run inference over the image and display the results show_inference(detection_model, path) . Running inference for /content/workspace/images/test/Bengal_72.jpg... Done ! . . Note: These cells given below will work only for Google-Colab. . #use google colab to load in a random image from local machine from google.colab import files #Upload file fname = files.upload() fname = list(fname.keys())[0] . show_inference(detection_model, fname, threshold=0.35) . Running inference for cat_dog.jpg... Done ! . Congrats! . Hope you enjoyed this! . Thank&#39;s for Reading ! .",
            "url": "https://benihime91.github.io/blog/machinelearning%20deeplearning%20tensorflow2.x%20tensorflow-object-detection/2020/11/02/tensorflow-object-detection.html",
            "relUrl": "/machinelearning%20deeplearning%20tensorflow2.x%20tensorflow-object-detection/2020/11/02/tensorflow-object-detection.html",
            "date": " • Nov 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Understanding L2 regularization, Weight decay and AdamW",
            "content": "What is regularization ? . In simple words regularization helps in reduces over-fitting on the data. There are many regularization strategies. . The major regularization techniques used in practice are: . L2 Regularization | L1 Regularization | Data Augmentation | Dropout | Early Stopping | . L2 regularization : . In L2 regularization, an extra term often referred to as regularization term is added to the loss function of the network. . Consider the the following cross entropy loss function (without regularization): . $$loss= - frac{1}{m} sum limits_{i = 1}^{m} (y^{(i)} log left(yhat^{(i)} right) + (1-y^{(i)}) log left(1-yhat^{(i)} right)) $$ . To apply L2 regularization to the loss function above we add the term given below to the loss function : . $$ frac{ lambda}{2m} sum limits_{w}w^{2} $$ . where $ lambda$ is a hyperparameter of the model known as the regularization parameter. $ lambda$ is a hyper-parameter which means it is not learned during the training but is tuned by the user manually . After applying the regularization term to our original loss function : $$finalLoss= - frac{1}{m} sum limits_{i = 1}^{m} (y^{(i)} log left(yhat^{(i)} right) + (1-y^{(i)}) log left(1-yhat^{(i)} right)) + frac{ lambda}{2m} sum limits_{w}w^{2}$$ . or , $$ finalLoss = loss+ frac{ lambda}{2m} sum limits_{w}w^{2}$$ . or in simple code : . final_loss = loss_fn(y, y_hat) + lamdba * np.sum(np.pow(weights, 2)) / 2 final_loss = loss_fn(y, y_hat) + lamdba * l2_reg_term . . Note: all code equations are written in python, numpy notation. . Cosequently the weight update step for vanilla SGD is going to look something like this: . w = w - learning_rate * grad_w - learning_rate * lamdba * grad(l2_reg_term, w) w = w - learning_rate * grad_w - learning_rate * lamdba * w . . Note: assume that grad_w is the gradients of the loss of the model wrt weights of the model. . . Note: assume that grad(a,b) calculates the gradients of a wrt to b. . In major deep-learning libraires L2 regularization is implemented by by adding lamdba * w to the gradients, rather than actually changing the loss function. . # compute the gradients to update w # grad_w is the gradients of loss wrt to w gradients = grad_w + lamdba * w # update step w = w - learning_rate * gradients . Weight Decay : . In weight decay we do not modify the loss function, the loss function remains the instead instead we modfy the update step : . The loss remains the same : . final_loss = loss_fn(y, y_hat) . During the update parameters : . w = w - learing_rate * grad_w - learning_rate * lamdba * w . . Tip: The major difference between L2 regularization &amp; weight decay is while the former modifies the gradients to add lamdba * w , weight decay does not modify the gradients but instead it subtracts learning_rate * lamdba * w from the weights in the update step. . A weight decay update is going to look like this : . # compute the gradients to update w # grad_w is the gradients of loss wrt to w gradients = grad_w # update step w = w - learning_rate * gradients - learning_rate * lamdba * w . In this equation we see how we subtract a little portion of the weight at each step, hence the name decay. . . Important: From the above equations weight decay and L2 regularization may seem the same and it is infact same for vanilla SGD , but as soon as we add momentum, or use a more sophisticated optimizer like Adam, L2 regularization and weight decay become different. . Weight Decay != L2 regularization . SGD with Momentum : . To prove this point let&#39;s first take a look at SGD with momentum . In SGD with momentum the gradients are not directly subtracted from the weights in the update step. . First, we calculate a moving average of the gradients . | and then , we subtract the moving average from the weights. | . For L2 regularization the steps will be : . # compute gradients gradients = grad_w + lamdba * w # compute the moving average Vdw = beta * Vdw + (1-beta) * (gradients) # update the weights of the model w = w - learning_rate * Vdw . Now, weight decay’s update will look like . # compute gradients gradients = grad_w # compute the moving average Vdw = beta * Vdw + (1-beta) * (gradients) # update the weights of the model w = w - learning_rate * Vdw - learning_rate * lamdba * w . . Note: $Vdw$ is a moving average of the parameter w . It starts at 0 and then at each step it is updated using the formulae for $Vdw$ given above. beta is a hyperparameter . . Adam : . This difference is much more visible when using the Adam Optimizer. Adam computes adaptive learning rates for each parameter. Adam stores moving average of past squared gradients and moving average of past gradients. These moving averages of past and past squared gradients $Sdw$ and $Vdw$ are computed as follows: . Vdw = beta1 * Vdw + (1-beta1) * (gradients) Sdw = beta2 * Sdw + (1-beta2) * np.square(gradients) . . Note: similar to SGD with momentum $Vdw$ and $Sdw$ are moving averages of the parameter w. These moving averages start from 0 and at each step are updated with the formulaes given above. beta1 and beta2 are hyperparameters. . and the update step is computed as : . w = w - learning_rate * ( Vdw/(np.sqrt(Sdw) + eps) ) . . Note: eps is a hypermarameter added for numerical stability. Commomly, $eps = 1e-08$ . . For L2 regularization the steps will be : . # compute gradients and moving_avg gradients = grad_w + lamdba * w Vdw = beta1 * Vdw + (1-beta1) * (gradients) Sdw = beta2 * Sdw + (1-beta2) * np.square(gradients) # update the parameters w = w - learning_rate * ( Vdw/(np.sqrt(Sdw) + eps) ) . For weight-decay the steps will be : . # compute gradients and moving_avg gradients = grad_w Vdw = beta1 * Vdw + (1-beta1) * (gradients) Sdw = beta2 * Sdw + (1-beta2) * np.square(gradients) # update the parameters w = w - learning_rate * ( Vdw/(np.sqrt(Sdw) + eps) ) - learning_rate * lamdba * w . The difference between L2 regularization and weight decay is clearly visible now. . In the case of L2 regularization we add this $lamdba * w$ to the gradients then compute a moving average of the gradients and their squares before using both of them for the update. . Whereas the weight decay method simply consists in doing the update, then subtract to each weight. . After much experimentation Ilya Loshchilov and Frank Hutter suggest in their paper : DECOUPLED WEIGHT DECAY REGULARIZATION we should use weight decay with Adam, and not the L2 regularization that classic deep learning libraries implement. This is what gave rise to AdamW. . In simple terms, AdamW is simply Adam optimzer used with weight decay instead of classic L2 regularization. . Implementing L2 regularization, weight decay and AdamW : . Now that we have got the boring theory part out of the way. Let&#39;s look at how implement L2 regularization, weight decay and AdamW can be implemented in Tensorflow2.X . . For this part we are going to use these libraries : . TensorFlow | TensorFlow Addons | TensorFlow Datasets | . Setting up imports . import tensorflow as tf import tensorflow_addons as tfa import tensorflow_datasets as tfds import matplotlib.pyplot as plt AUTOTUNE = tf.data.experimental.AUTOTUNE . Loading and pre-preocessing the data : . In this example we are going to use the tf_flowers dataset available in tensorflow datasets . # train dataset train_ds = tfds.load(&quot;tf_flowers&quot;, split=&quot;train[:80%]&quot;, as_supervised=True, with_info=False ) # validation dataset valid_ds = tfds.load(&quot;tf_flowers&quot;, split=&quot;train[80%:]&quot;, as_supervised=True, with_info=False) print(&quot;NUM EXMAPLES IN TRAIN DATASET : &quot;, len(train_ds)) print(&quot;NUM EXAMPLES IN VALIDATION DATASET: &quot;, len(valid_ds)) . NUM EXMAPLES IN TRAIN DATASET : 2936 NUM EXAMPLES IN VALIDATION DATASET: 734 . IMAGE_SIZE = 224 def process_image(image, label, img_size=IMAGE_SIZE): &quot;&quot;&quot; Fn converts the images data types, scales to image to have pixel values betwwen [0, 1] This functions also resizes the image to given `img_size`. Args: image : An image label : target label associated with the image img_size: size of the image after resize &quot;&quot;&quot; # cast and normalize image image = tf.image.convert_image_dtype(image, tf.float32) image = tf.image.resize(image,[img_size, img_size]) return image, label . # dataset to be train_ds = train_ds.map(process_image, num_parallel_calls=AUTOTUNE).batch(30).prefetch(AUTOTUNE) valid_ds = valid_ds.map(process_image, num_parallel_calls=AUTOTUNE).batch(32).prefetch(AUTOTUNE) . View images from the dataset : . def view_images(ds): &quot;&quot;&quot; Diplays images from the given dataset Args: ds: A TensorFlow Dataset &quot;&quot;&quot; image, label = next(iter(ds)) # extract 1 batch from the dataset image = image.numpy() label = label.numpy() fig = plt.figure(figsize=(10,10)) for i in range(16): ax = fig.add_subplot(4, 4, i+1, xticks=[], yticks=[]) ax.imshow(image[i]) ax.set_title(f&quot;Label: {label[i]}&quot;) . . Train dataset : . # view example images from the train dataset view_images(train_ds) . . Validation dataset : . # view example images from the valid dataset view_images(valid_ds) . . The model we are going to use: . . Note: For loss_fn we are ging to use tf.keras.losses.SparseCategoricalCrossentropy which is CrossEntropyLoss also since we are not using a activation in the output layer we need to set tf.keras.losses.SparseCategoricalCrossentropy(from_logits = True) and let&#8217;s compute the accuracy of our model so we will use tf.keras.metrics.SparseCategoricalAccuracy(name=&quot;accuracy&quot;). . L2 regularization : . To use L2 regularization, in tensorflow we need to use the class : tf.keras.regularizers.L2 . . After which in each layer of our model we will need to add the argument kernel_regularizer. . Let&#39;s see and exmple below . Build a model with L2 regularization . # we also need to set the value from lambda in the # tf.keras.regularizers.l2 this values is passed to l2 l2_reg = tf.keras.regularizers.l2(l2=0.001) def get_l2_model(): &quot;&quot;&quot; Returns a tf.keras.Model instance with L2 regularization . &quot;&quot;&quot; model = tf.keras.Sequential([ tf.keras.Input(shape=(IMAGE_SIZE, IMAGE_SIZE, 3)), tf.keras.layers.Conv2D(64, 3, kernel_regularizer=l2_reg, padding=&quot;same&quot;), tf.keras.layers.MaxPooling2D(2), tf.keras.layers.ReLU(), tf.keras.layers.Dropout(0.2,), tf.keras.layers.Conv2D(64, 3, kernel_regularizer=l2_reg, padding=&quot;same&quot;), tf.keras.layers.MaxPooling2D(2), tf.keras.layers.ReLU(), tf.keras.layers.Dropout(0.2,), tf.keras.layers.Flatten(), tf.keras.layers.Dense(120, activation=&quot;relu&quot;, kernel_regularizer=l2_reg, ), # since our data has five distinct classes tf.keras.layers.Dense(5, kernel_regularizer=l2_reg), ]) return model . L2 regularizaton with SGD and momentum : . OPTIMIZER = tf.keras.optimizers.SGD(learning_rate=1e-03, momentum=0.9) LOSS_FN = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True) METRICS = tf.keras.metrics.SparseCategoricalAccuracy(name=&quot;accuracy&quot;) model = get_l2_model() model.compile(optimizer=OPTIMIZER, loss=LOSS_FN, metrics=METRICS) # Fit model on the train data l2_sgd_hist = model.fit(train_ds, validation_data=valid_ds, epochs=10) . Epoch 1/10 98/98 [==============================] - 5s 49ms/step - loss: 1.7185 - accuracy: 0.3808 - val_loss: 1.5622 - val_accuracy: 0.4891 Epoch 2/10 98/98 [==============================] - 5s 47ms/step - loss: 1.4715 - accuracy: 0.5184 - val_loss: 1.4857 - val_accuracy: 0.5354 Epoch 3/10 98/98 [==============================] - 5s 48ms/step - loss: 1.3781 - accuracy: 0.5688 - val_loss: 1.4252 - val_accuracy: 0.5736 Epoch 4/10 98/98 [==============================] - 5s 48ms/step - loss: 1.3150 - accuracy: 0.6144 - val_loss: 1.4002 - val_accuracy: 0.5777 Epoch 5/10 98/98 [==============================] - 5s 48ms/step - loss: 1.2618 - accuracy: 0.6427 - val_loss: 1.3824 - val_accuracy: 0.5845 Epoch 6/10 98/98 [==============================] - 5s 49ms/step - loss: 1.2081 - accuracy: 0.6649 - val_loss: 1.3765 - val_accuracy: 0.5913 Epoch 7/10 98/98 [==============================] - 5s 48ms/step - loss: 1.1521 - accuracy: 0.6921 - val_loss: 1.3684 - val_accuracy: 0.5886 Epoch 8/10 98/98 [==============================] - 5s 49ms/step - loss: 1.0927 - accuracy: 0.7176 - val_loss: 1.3518 - val_accuracy: 0.6008 Epoch 9/10 98/98 [==============================] - 5s 48ms/step - loss: 1.0346 - accuracy: 0.7476 - val_loss: 1.3545 - val_accuracy: 0.6035 Epoch 10/10 98/98 [==============================] - 5s 48ms/step - loss: 0.9705 - accuracy: 0.7752 - val_loss: 1.3697 - val_accuracy: 0.5995 . L2 regularization with Adam : . OPTIMIZER = tf.keras.optimizers.Adam(learning_rate=3e-04,) model = get_l2_model() model.compile(optimizer=OPTIMIZER, loss=LOSS_FN, metrics=METRICS) # Fit model on the train data l2_adam_hist = model.fit(train_ds, validation_data=valid_ds, epochs=10) . Epoch 1/10 98/98 [==============================] - 5s 49ms/step - loss: 1.9146 - accuracy: 0.4038 - val_loss: 1.4483 - val_accuracy: 0.4755 Epoch 2/10 98/98 [==============================] - 5s 48ms/step - loss: 1.3192 - accuracy: 0.5245 - val_loss: 1.2808 - val_accuracy: 0.5627 Epoch 3/10 98/98 [==============================] - 5s 49ms/step - loss: 1.1829 - accuracy: 0.6029 - val_loss: 1.2172 - val_accuracy: 0.6022 Epoch 4/10 98/98 [==============================] - 5s 48ms/step - loss: 1.0777 - accuracy: 0.6587 - val_loss: 1.1689 - val_accuracy: 0.5967 Epoch 5/10 98/98 [==============================] - 5s 49ms/step - loss: 0.9801 - accuracy: 0.7064 - val_loss: 1.1497 - val_accuracy: 0.6144 Epoch 6/10 98/98 [==============================] - 5s 49ms/step - loss: 0.8905 - accuracy: 0.7561 - val_loss: 1.1535 - val_accuracy: 0.6267 Epoch 7/10 98/98 [==============================] - 5s 49ms/step - loss: 0.7950 - accuracy: 0.7987 - val_loss: 1.1712 - val_accuracy: 0.6349 Epoch 8/10 98/98 [==============================] - 5s 49ms/step - loss: 0.6899 - accuracy: 0.8522 - val_loss: 1.1911 - val_accuracy: 0.6322 Epoch 9/10 98/98 [==============================] - 5s 48ms/step - loss: 0.5904 - accuracy: 0.8934 - val_loss: 1.3133 - val_accuracy: 0.6035 Epoch 10/10 98/98 [==============================] - 5s 48ms/step - loss: 0.5640 - accuracy: 0.9019 - val_loss: 1.2912 - val_accuracy: 0.6213 . Weight Decay : . To use SGD with momentum along with weight_decay we need to use the class : tfa.optimizers.SGDW. . This class implements the SGDW optimizer described in Decoupled Weight Decay Regularization by Loshchilov &amp; Hutter. . def get_wd_model(): &quot;&quot;&quot; Returns a tf.keras.Model instance without L2 regularization. &quot;&quot;&quot; model = tf.keras.Sequential([ tf.keras.Input(shape=(IMAGE_SIZE, IMAGE_SIZE, 3)), tf.keras.layers.Conv2D(64, 3, padding=&quot;same&quot;), tf.keras.layers.MaxPooling2D(2), tf.keras.layers.ReLU(), tf.keras.layers.Dropout(0.2,), tf.keras.layers.Conv2D(64, 3, padding=&quot;same&quot;), tf.keras.layers.MaxPooling2D(2), tf.keras.layers.ReLU(), tf.keras.layers.Dropout(0.2,), tf.keras.layers.Flatten(), tf.keras.layers.Dense(120, activation=&quot;relu&quot;,), # since our data has five distinct classes tf.keras.layers.Dense(5,), ]) return model . model = get_wd_model() # instantiate model with SGD with WD optimizer OPTIMIZER = tfa.optimizers.SGDW(weight_decay=0.001, learning_rate=1e-03, momentum=0.9) model.compile(optimizer=OPTIMIZER, loss=LOSS_FN, metrics=METRICS) # Fit model on the train data wd_sgd_hist = model.fit(train_ds, validation_data=valid_ds, epochs=10) . Epoch 1/10 98/98 [==============================] - 5s 48ms/step - loss: 1.4168 - accuracy: 0.3324 - val_loss: 1.2875 - val_accuracy: 0.4482 Epoch 2/10 98/98 [==============================] - 5s 47ms/step - loss: 1.1985 - accuracy: 0.4888 - val_loss: 1.2030 - val_accuracy: 0.5041 Epoch 3/10 98/98 [==============================] - 5s 47ms/step - loss: 1.1253 - accuracy: 0.5307 - val_loss: 1.1591 - val_accuracy: 0.5341 Epoch 4/10 98/98 [==============================] - 5s 47ms/step - loss: 1.0873 - accuracy: 0.5562 - val_loss: 1.1328 - val_accuracy: 0.5599 Epoch 5/10 98/98 [==============================] - 5s 47ms/step - loss: 1.0591 - accuracy: 0.5732 - val_loss: 1.1161 - val_accuracy: 0.5586 Epoch 6/10 98/98 [==============================] - 5s 47ms/step - loss: 1.0364 - accuracy: 0.5923 - val_loss: 1.1023 - val_accuracy: 0.5572 Epoch 7/10 98/98 [==============================] - 5s 47ms/step - loss: 1.0166 - accuracy: 0.6001 - val_loss: 1.0915 - val_accuracy: 0.5654 Epoch 8/10 98/98 [==============================] - 5s 47ms/step - loss: 0.9987 - accuracy: 0.6124 - val_loss: 1.0836 - val_accuracy: 0.5708 Epoch 9/10 98/98 [==============================] - 5s 47ms/step - loss: 0.9833 - accuracy: 0.6250 - val_loss: 1.0800 - val_accuracy: 0.5681 Epoch 10/10 98/98 [==============================] - 5s 47ms/step - loss: 0.9669 - accuracy: 0.6342 - val_loss: 1.0804 - val_accuracy: 0.5681 . AdamW : . To use AdamW optimizer we need to use the class : tfa.optimizers.AdamW . This is an implementation of the AdamW optimizer described in Decoupled Weight Decay Regularization by Loshch ilov &amp; Hutter. . model = get_wd_model() # instantite model AdamW Optimizer OPTIMIZER = tfa.optimizers.AdamW(weight_decay=0.001, learning_rate=3e-04) model.compile(optimizer=OPTIMIZER, loss=LOSS_FN, metrics=METRICS) # Fit model on the train data adamW_hist = model.fit(train_ds, validation_data=valid_ds, epochs=10) . Epoch 1/10 98/98 [==============================] - 5s 48ms/step - loss: 1.6241 - accuracy: 0.3866 - val_loss: 1.2442 - val_accuracy: 0.5136 Epoch 2/10 98/98 [==============================] - 5s 48ms/step - loss: 1.1282 - accuracy: 0.5419 - val_loss: 1.1058 - val_accuracy: 0.5845 Epoch 3/10 98/98 [==============================] - 5s 48ms/step - loss: 0.9986 - accuracy: 0.6134 - val_loss: 1.0358 - val_accuracy: 0.6049 Epoch 4/10 98/98 [==============================] - 5s 47ms/step - loss: 0.8969 - accuracy: 0.6679 - val_loss: 1.0081 - val_accuracy: 0.6104 Epoch 5/10 98/98 [==============================] - 5s 48ms/step - loss: 0.7981 - accuracy: 0.7159 - val_loss: 1.0099 - val_accuracy: 0.5967 Epoch 6/10 98/98 [==============================] - 5s 47ms/step - loss: 0.6941 - accuracy: 0.7640 - val_loss: 1.0121 - val_accuracy: 0.5981 Epoch 7/10 98/98 [==============================] - 5s 47ms/step - loss: 0.5770 - accuracy: 0.8236 - val_loss: 1.0145 - val_accuracy: 0.5940 Epoch 8/10 98/98 [==============================] - 5s 47ms/step - loss: 0.4714 - accuracy: 0.8764 - val_loss: 1.0802 - val_accuracy: 0.5981 Epoch 9/10 98/98 [==============================] - 5s 47ms/step - loss: 0.3971 - accuracy: 0.9077 - val_loss: 1.2265 - val_accuracy: 0.5613 Epoch 10/10 98/98 [==============================] - 5s 47ms/step - loss: 0.4072 - accuracy: 0.8893 - val_loss: 1.0511 - val_accuracy: 0.6117 . Loss and Accuracy Curves : . plt.style.use(&quot;ggplot&quot;) plt.figure(figsize=(10,6)) plt.title(&quot;Losses&quot;) plt.plot(l2_sgd_hist.history[&quot;loss&quot;], label=&quot;sgd with l2&quot;) plt.plot(l2_adam_hist.history[&quot;loss&quot;], label=&quot;adam with l2&quot;) plt.plot(wd_sgd_hist.history[&quot;loss&quot;], label=&quot;sgd with wd&quot;) plt.plot(adamW_hist.history[&quot;loss&quot;], label=&quot;adamW&quot;) plt.plot(l2_sgd_hist.history[&quot;val_loss&quot;], label=&quot;valid sgd with l2&quot;, linestyle=&#39;dashed&#39;) plt.plot(l2_adam_hist.history[&quot;val_loss&quot;], label=&quot;valid adam with l2&quot;, linestyle=&#39;dashed&#39;) plt.plot(wd_sgd_hist.history[&quot;val_loss&quot;], label=&quot;valid sgd with wd&quot;, linestyle=&#39;dashed&#39;) plt.plot(adamW_hist.history[&quot;val_loss&quot;], label=&quot;valid adamW&quot;, linestyle=&#39;dashed&#39;) plt.xlabel(&quot;# epochs&quot;) plt.ylabel(&quot;loss&quot;) plt.legend(); . . Weight Decay or L2 regularization ? . After all this which should we use : L2 regularization or weight decay ? . According to the words of Jeremy Howard from Fast.ai : . So, weight decay is always better than L2 regularization with Adam then? We haven’t found a situation where it’s significantly worse, but for either a transfer-learning problem (e.g. fine-tuning Resnet50 on Stanford cars) or RNNs, it didn’t give better results. . Also in the above models that we trained with both sgd and adam optimzer using weight decay has lead to lower loss for both sgd and adam. . Summary : . we explored the concepts behind weight decay and L2 regularization . | explored Adam &amp; AdamW . | learned how to implement weight decay, L2 regularization &amp; AdamW in TensorFlow | . Thanks for reading ! . References : . AdamW and Super-convergence is now the fastest way to train neural nets | Decoupled Weight Decay Regularization | An overview of gradient descent optimization algorithms | .",
            "url": "https://benihime91.github.io/blog/machinelearning%20deeplearning%20python3.x%20tensorflow2.x/2020/10/08/adamW.html",
            "relUrl": "/machinelearning%20deeplearning%20python3.x%20tensorflow2.x/2020/10/08/adamW.html",
            "date": " • Oct 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Creating a Neural-Network from scratch",
            "content": "I will assume that you all know what a artificial neural network is and have a little bit of knowledge about forward and backward propagation. Just having a simple idea is enough. . Tip: If you do not know what the above terms are or would like to brush up on the topics, I would suggest going through this amazing youtube playlist by 3Blue1Brown. . . Setting up Imports: . import numpy as np import gzip import pickle import pandas as pd import matplotlib.pyplot as plt . Preparing the data . For this blog post, we&#39;ll use one of the most famous datasets in computer vision, MNIST. MNIST contains images of handwritten digits, collected by the National Institute of Standards and Technology and collated into a machine learning dataset by Yann Lecun and his colleagues. Lecun used MNIST in 1998 in Lenet-5, the first computer system to demonstrate practically useful recognition of handwritten digit sequences. This was one of the most important breakthroughs in the history of AI. . Run the code given below to download the MNIST dataset. . wget -P path http://deeplearning.net/data/mnist/mnist.pkl.gz . . Note: the above code snippet will download the dataset to {path} so be sure to set the {path} to the desired location of your choice. . def get_data(path): &quot;&quot;&quot; Fn to unzip the MNIST data and return the data as numpy arrays &quot;&quot;&quot; with gzip.open(path, &#39;rb&#39;) as f: ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=&#39;latin-1&#39;) return map(np.array, (x_train,y_train,x_valid,y_valid)) # Grab the MNIST dataset x_train,y_train,x_valid,y_valid = get_data(path= &quot;../../Datasets/mnist.pkl.gz&quot;) tots,feats = x_train.shape print(&quot;Shape of x_train:&quot;,x_train.shape) print(&quot;Total number of examples:&quot;, tots) print(&quot;Number of pixel values per image:&quot;, feats) . Shape of x_train: (50000, 784) Total number of examples: 50000 Number of pixel values per image: 784 . Preparing our train &amp; validation datasets . To make our life a bit easier we are going to take only the examples that contain a 1 or 0. . zero_mask = [y_train==0] # grab all the index values where 0 is present one_mask = [y_train==1] # grad all the index valus where 1 is present # grab all the 1&#39;s and 0&#39;s and make training set x_train = np.vstack((x_train[zero_mask], x_train[one_mask])) y_train = np.reshape(y_train, (-1,1)) y_train = np.squeeze(np.vstack((y_train[zero_mask], y_train[one_mask]))).reshape(-1,1) x_train.shape, y_train.shape . ((10610, 784), (10610, 1)) . Our training set now has 10610 examples . zero_mask = [y_valid==0] # grab all the index values where 0 is present one_mask = [y_valid==1] # grad all the index valus where 1 is present # grab all the 1&#39;s and 0&#39;s and make training set x_valid = np.vstack((x_valid[zero_mask], x_valid[one_mask])) y_valid = np.reshape(y_valid, (-1,1)) y_valid = np.squeeze(np.vstack((y_valid[zero_mask], y_valid[one_mask]))).reshape(-1,1) x_valid.shape, y_valid.shape . ((2055, 784), (2055, 1)) . Our validation set now has 2055 examples . Why do we need different training and validation sets ? . Since, this topic requires a different post on it&#39;s own I won&#39;t be covering it here. But you can get the idea from this above video: . Let&#39;s view some example images from our dataset: . plt.imshow(x_train[50].reshape(28,28), cmap=&quot;gray&quot;); . . plt.imshow(x_train[5000].reshape(28,28), cmap=&quot;gray&quot;); . . Basic Model Architecture . For this task we are going to use a very basic model architecture this 2 linear layers and a output layer with 1 unit. . Let&#39;s take a deep dive into what this network means: . Let&#39;s take at look at all the individual components of this network: . Linear: The linear layer computes the following : . out = matmul(input,W1) + B1 . | ReLU: The relu computes the following: . out = max(0, input) . | Sigmoid: The sigmoid computes the following: . out = 1/(1 + e.pow(input)) . | Loss: For the loss we are going to use the CrossEntropy Loss which is defined by the follwoing equation: $$loss= - frac{1}{m} sum limits_{i = 1}^{m} (y^{(i)} log left(yhat^{(i)} right) + (1-y^{(i)}) log left(1-yhat^{(i)} right)) $$ . | . Now that we have our model architecture, let&#39;s create the different parts needed to assemble the model: . linear layer | relu activation | sigmoid activation | loss | . Let&#39;s first try to make some sense of what is happening in the backward and forward pass of our model: . On paper our forward pass would look something like this: . Note: @ in python is the matrix-multiplication operator. . inputs = x_train # original inputs targets = y_train # original targets # forward pass for the 1st linear layer z1 = inputs @ w2 + b2 a1 = relu(z1) # forward pass for the 2nd linear layer z2 = a1 @ w2 + b2 a2 = relu(z2) # forward pass for the output linear layer z3 = a2 @ w3 + b3 pred = a3 = sigmoid(z3) # these are our model predictions # calculate loss between original targets &amp; model predictions loss = loss_fn(a3, targets) . . Note: This is not actual code it&#8217;s just psuedo-code for understanding. . Forward pass : . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G X X linear1 linear1 X&#45;&gt;linear1 relu1 relu1 linear1&#45;&gt;relu1 linear2 linear2 relu1&#45;&gt;linear2 relu2 relu2 linear2&#45;&gt;relu2 linear3 linear3 relu2&#45;&gt;linear3 sigmoid sigmoid linear3&#45;&gt;sigmoid prediction prediction sigmoid&#45;&gt;prediction W1 W1 W1&#45;&gt;linear1 B1 B1 B1&#45;&gt;linear1 W2 W2 W2&#45;&gt;linear2 B2 B2 B2&#45;&gt;linear2 W3 W3 W3&#45;&gt;linear3 B3 B3 B3&#45;&gt;linear3 &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G prediction prediction loss_fn loss_fn prediction&#45;&gt;loss_fn loss loss loss_fn&#45;&gt;loss target target target&#45;&gt;loss_fn Consequently our backward pass would look something like this : . (Let us assume that the grad(inp, out) computes the gradients of inp wrt out) . # gradient of loss wrt to the output of the last activation layer: (a3) # (or the predictions of model) da3 = grad(loss, a3) # gradient of loss wrt to the output of the current linear layer: (z3) dz3 = grad(loss, z3) = grad(loss, a3) * grad(a3, z3) # gradient of loss wrt to w3 dw3 = grad(loss, w3) = grad(loss, z3) * grad(z3, w3) = dz3 * grad(z3, w3) # gradient of loss wrt to b3 db3 = grad(loss, b3) = grad(loss, z3) * grad(z3, b3) = dz3 * grad(z3, b3) # gradient of loss wrt to the input of the current linear layer: (a2) da2 = grad(loss, a2) = grad(loss, a3) = grad(a2, ) # gradient of loss wrt to the output of the current linear layer: (z2) dz2 = grad(loss, z2) = grad(loss, a2) * grad(a2, z2) # gradient of loss wrt to w2 dw2 = grad(loss, w2) = grad(loss, z2) * grad(z2, w2) = dz2 * grad(z2, w2) # gradient of loss wrt to b2 db2 = grad(loss, b2) = grad(loss, z2) * grad(z2, b2) = dz2 * grad(z2, b2) # gradient of loss wrt to the input of the current linear layer: (a1) da1 = grad(loss, a1) = grad(loss, z2) * grad(z2, a1) = dz2 * grad(z2, a1) # gradient of loss wrt to the output of the current linear layer: (z1) dz1 = grad(loss, z1) = grad(loss, a1) * grad(a1, z1) = da1 * grad(a1, z1) # gradient of loss wrt to w1 dw1 = grad(loss, w1) = grad(loss, z1) * grad(z1, w1) = dz1 * grad(z1, w1) # gradient of loss wrt to b1 db1 = grad(loss, b1) = grad(loss, z1) * grad(z1, 1) = dz1 * grad(z1, b1) # In this layer the inputs are out training examples which we cannot change so # we do not need to commpute more gradients # Update parameters : # since we now have all the required gradients we can now perform the update step w1 -= learning_rate * dw1 b1 -= learning_rate * db1 w2 -= learning_rate * dw2 b2 -= learning_rate * db2 . . Note: This is not actual code it&#8217;s just psuedo-code for understanding. . Backward pass: . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G Loss Loss sigmoid sigmoid Loss&#45;&gt;sigmoid linear3 linear3 sigmoid&#45;&gt;linear3 W3 W3 linear3&#45;&gt;W3 B3 B3 linear3&#45;&gt;B3 relu2 relu2 linear3&#45;&gt;relu2 linear2 linear2 relu2&#45;&gt;linear2 W2 W2 linear2&#45;&gt;W2 B2 B2 linear2&#45;&gt;B2 relu1 relu1 linear2&#45;&gt;relu1 linear1 linear1 relu1&#45;&gt;linear1 W1 W1 linear1&#45;&gt;W1 B1 B1 linear1&#45;&gt;B1 The Linear Layer . Below code creates a Linear class which represents a Linear layer in our neural-network. The forward function of the class implements the of the layer&#39;s forward propagation &amp; the backward function implements the layers&#39;s backward propagation. Let&#39;s go to detail into what the code means: . Forward: This part is quite straight-forward it computes the dot-product between the input and the weights &amp; adds the bias term to get z. It also stores all the intermidiate values generated to use in the backward pass. | . Backward: The backward method of the class Linear takes in the argument grads. | grads is the gradient of the loss wrt to the output of the current linear layer ie., dz if we were to follow the nomenclature of our pseudo-code. | To succesfully compute the backward pass for our linear layer we need the following: grad(z, w) | grad(z, b) | grad(z, a_prev) | . | . | . . Note: z, w, b, a_prev are the outputs, weights, bias and input-activations of the Linear layer respectively. . class Linear: def __init__(self, w, b): self.w = w self.b = b def forward(self, inp): &quot;&quot;&quot; Implement the linear part of a layer&#39;s forward propagation. Args: inp : activations from previous layer (or input data) Returns: z : the input of the activation function, also called pre-activation parameter &quot;&quot;&quot; self.inp = inp self.z = inp @ self.w + self.b return self.z def backward(self, grads): &quot;&quot;&quot; Implement the linear portion of backward propagation for a single layer. Args: grads : Gradient of the cost with respect to the linear output. or the accumulated gradients from the prev layers. This is used for the chain rule to compute the gradients. Returns: da : Gradient of cost wrt to the activation of the previous layer or the input of the current layer. dw : Gradient of the cost with respect to W db : Gradient of the cost with respect to b &quot;&quot;&quot; m = self.inp.shape[1] # gradient of loss wrt to the weights dw = 1/m * (self.inp.T @ grads) # gradient of the loss wrt to the bias db = 1/m * np.sum(grads, axis=0, keepdims=True) # gradient of the loss wrt to the input of the linear layer # this is used to continue the chain rule da_prev = grads @ self.w.T return (da_prev, dw, db) . The ReLU Layer . Forward: The mathematical formula for ReLU is $A = RELU(Z) = max(0, Z)$ | Backward: During the backward pass the relu accepts the gradients of the loss wrt to the activation i.e, da then computes the gradients of the loss wrt to the input-of-relu(z) i.e, dz. | . class RelU: def forward(self, inp): &quot;&quot;&quot; Implement the RELU function. Args: inp : Output of the linear layer, of any shape Returns: a : Post-activation parameter, of the same shape as Z &quot;&quot;&quot; self.inp = inp self.output = np.maximum(0, self.inp) return self.output def backward(self, grads): &quot;&quot;&quot; Implement the backward propagation for a single RELU unit. Ars: grads : gradients of the loss wrt to the activation output Returns: dz : Gradient of the loss with respect to the input of the activation &quot;&quot;&quot; dz = np.array(grads, copy=True) dz[self.inp &lt;= 0] = 0 return dz . The sigmoid Layer . The sigmoid layer functions in exactly the same way as the ReLU layer . The only difference is the forward pass output calculation. . In the sigmoid layer: $ sigma(Z) = frac{1}{ 1 + e^{-(W A + b)}}$ . class Sigmoid: def forward(self, inp): &quot;&quot;&quot; Implements the sigmoid activation in numpy Args: inp: numpy array of any shape Returns: a : output of sigmoid(z), same shape as inp &quot;&quot;&quot; self.inp = inp self.out = 1/(1+np.exp(-self.inp)) return self.out def backward(self, grads): &quot;&quot;&quot; Implement the backward propagation for a single sigmoid unit. Args: grads : gradients of the loss wrt to the activation output Returns: dz : Gradient of the loss with respect to the input of the activation &quot;&quot;&quot; s = 1/(1+np.exp(-self.inp)) dz = grads * s * (1-s) return dz . Loss function : . For this task we are going to use the CrossEntropy Loss . The forward pass of the CrossEntropy Loss is computed as follows: $$loss= - frac{1}{m} sum limits_{i = 1}^{m} (y^{(i)} log left(yhat^{(i)} right) + (1-y^{(i)}) log left(1-yhat^{(i)} right)) $$ . class CELoss(): def forward(self, pred, target): &quot;&quot;&quot; Implement the CrossEntropy loss function. Args: pred : predicted labels from the neural network target : true &quot;label&quot; labels Returns: loss : cross-entropy loss &quot;&quot;&quot; self.yhat = pred self.y = target m = self.y.shape[0] # commpute loss term1 = (np.multiply(self.y, np.log(self.yhat))) term2 = (np.multiply((1-self.y),(np.log(1-self.yhat)))) loss = -1/m * np.sum(term1+term2) self.output = loss return np.squeeze(self.output) # convert array to a single value number def backward(self): &quot;&quot;&quot; Computes the gradinets of the loss_fn wrt to the predicted labels Returns: da : derivative of loss_fn wrt to the predicted labels &quot;&quot;&quot; # derivative of loss_fn with respect to a [predicted labels] da = - (np.divide(self.y, self.yhat) - np.divide(1 - self.y, 1 - self.yhat)) return da . Model: . Let&#39;s go over the architecture that we are going to use for our neural netwok: . Our model is going to have 2 hidden layers and a output layer. | The 2 hidden layers (linear layers) are going to have 16 units each followed by a ReLU activation layer and the output layer (linear layer) is going to have 1 unit followed by a Sigmoid unit. | The output layer is going to predict the probability of wether the given input is either a 0 or a 1. If the predicted probability is &gt; 0.5 we will assumse that the predicted output is 1 else 0. | . Let&#39;s assemble the layers required to construct out model: . These are our inputs and targets: . print(&quot;Shape of Inputs:&quot;, x_train.shape) print(&quot;Shape of Targets:&quot;, y_train.shape) fig = plt.figure(figsize=(12,5)) for i in range(10): n = np.random.randint(len(x_train)) val = x_train[n] ax = plt.subplot(2, 5, i+1) plt.imshow(val.reshape(28,28), cmap=&quot;binary&quot;) plt.title(f&quot;Target value: {y_train[n].squeeze()}&quot;) plt.axis(&quot;off&quot;) . . Shape of Inputs: (10610, 784) Shape of Targets: (10610, 1) . Initialize model parameters: . nh1 = 16 # no. of units in the first hidden layer nh2 = 16 # no. of units in the 2nd hidden layer nh3 = 1 # no. of units in the output layer w1 = np.random.randn(x_train.shape[1], nh1) * 0.01 b1 = np.zeros((1, nh1)) w2 = np.random.randn(nh1, nh2) * 0.01 b2 = np.zeros((1, nh2)) w3 = np.random.randn(nh2, nh3) b3 = np.zeros((1, nh3)) w1.shape, b1.shape, w2.shape, b2.shape, w3.shape, b3.shape . Instaniating the layers needed to construct our model: . lin1 = Linear(w1,b1) # 1 hidden layer relu1 = RelU() lin2 = Linear(w2,b2) # 2nd hidden layer relu2 = RelU() lin3 = Linear(w3,b3) # output layer sigmoid = Sigmoid() loss_fn = CELoss() # loss_fn . Forward pass: . z1 = lin1.forward(x_train) a1 = relu1.forward(z1) z2 = lin2.forward(a1) a2 = relu2.forward(z2) z3 = lin3.forward(a2) pred = a3 = sigmoid.forward(z3) # calculate loss loss = loss_fn.forward(pred, y_train) print(&quot;Loss:&quot;, loss) # print out the loss . Loss: 0.6914281432245456 . Backward pass: . da3 = loss_fn.backward() # gradient of loss wrt to final output dz3 = sigmoid.backward(da3) da2, dw3, db3 = lin3.backward(dz3) dz2 = relu2.backward(da2) da1, dw2, db2 = lin2.backward(dz2) dz1 = relu1.backward(da1) _, dw1, db1 = lin1.backward(da1) # check if the parameters and the gradients are of same shape # so that we can preform the update state assert lin1.w.shape == dw1.shape assert lin2.w.shape == dw2.shape assert lin3.w.shape == dw3.shape assert lin1.b.shape == db1.shape assert lin2.b.shape == db2.shape assert lin3.b.shape == db3.shape . Update parameters: . learning_rate = 0.0002 # update parameters lin1.w -= learning_rate * dw1 lin2.w -= learning_rate * dw2 lin3.w -= learning_rate * dw3 lin1.b -= learning_rate * db1 lin2.b -= learning_rate * db2 lin3.b -= learning_rate * db3 . So, this is how our training our model is going to look we first calculate the loss of the model during the forward pass , then we calculate the gradients of the loss wrt to the parameters of the model. After which these gradients are used to update the model parameters. We continue this workflow for a certain number of iterations or until our loss reaches the desired value. . Let&#39;s code up a class which will make this steps easir to achieve. . Putting it all together: . Initializing parameters: | . # Instantiate parameters nh1 = 16 # no. of units in the first hidden layer nh2 = 16 # no. of units in the 2nd hidden layer nh3 = 1 # no. of units in the output layer w1 = np.random.randn(x_train.shape[1], nh1) * 0.01 b1 = np.zeros((1, nh1)) w2 = np.random.randn(nh1, nh2) * 0.01 b2 = np.zeros((1, nh2)) w3 = np.random.randn(nh2, nh3) b3 = np.zeros((1, nh3)) w1.shape, b1.shape, w2.shape, b2.shape, w3.shape, b3.shape . For our convenice, we will create a Model class . . This Model class will store all the parameters for our neural-network. The forward method will compute the forward pass of the network to generate the loss (and or predictions) of the model. The backward method will compute the backward pass of the network to get the gradinets of the loss wrt to the parameters of the model. Finally the update method will update the parameters of the model. . class Model: def __init__(self, learning_rate): &quot;&quot;&quot; A simple neural network model The `forward` method computes the forward propagation step of the model The `backward` method computes the backward step propagation of the model The `update_step` method updates the parameters of the model &quot;&quot;&quot; self.lin1 = Linear(w1,b1) # 1st linear layer self.relu1 = RelU() # 1st activation layer self.lin2 = Linear(w2,b2) # 2nd linear layer self.relu2 = RelU() # 2nd activation layer self.lin3 = Linear(w3,b3) # 3rd linear layer self.sigmoid = Sigmoid() # 3rd activation layer self.loss_fn = CELoss() # loss_fn # learning_rate to update model parameters self.lr = learning_rate # stores the loss at each iteration self.losses = [] def forward(self, inp, calc_loss=True, targ=None): &quot;&quot;&quot; Computs the forward step for out model Additionally it also returns the loss [Optional] and the predictions of the model. Args: inp : the training set. calc_loss : wether to calculate loss of the model if False only predictions are calculated. targ : the original targets to the training set. Note: to calculate the `loss` the `targ` must be given Returns: pred : outputs of the 3rd activation layer. loss : [Optional] loss the model , if the `targ` is given. &quot;&quot;&quot; out = self.relu1.forward(self.lin1.forward(inp)) out = self.relu2.forward(self.lin2.forward(out)) pred = self.sigmoid.forward(self.lin3.forward(out)) if calc_loss: assert targ is not None, &quot;to calculate loss targets must be given&quot; loss = self.loss_fn.forward(pred, targ) # appending the loss of the current iteration self.losses.append(loss) return loss, pred else: return pred def _assert_shapes(self): &quot;&quot;&quot; Checks the shape of the parameters and the gradients of the model &quot;&quot;&quot; assert lin1.w.shape == dw1.shape assert lin2.w.shape == dw2.shape assert lin3.w.shape == dw3.shape assert lin1.b.shape == db1.shape assert lin2.b.shape == db2.shape assert lin3.b.shape == db3.shape def backward(self): &quot;&quot;&quot; Computes the backward step and return the gradients of the parameters with the loss &quot;&quot;&quot; da3 = self.loss_fn.backward() dz3 = self.sigmoid.backward(da3) da2, dw3, db3 = self.lin3.backward(dz3) dz2 = self.relu2.backward(da2) da1, dw2, db2 = self.lin2.backward(dz2) dz1 = self.relu1.backward(da1) _, dw1, db1 = self.lin1.backward(dz1) self._assert_shapes() self.dws = [dw1, dw2, dw3] self.dbs = [db1, db2, db3] def update(self): &quot;&quot;&quot; Performs the update step &quot;&quot;&quot; self.lin1.w -= self.lr * self.dws[0] self.lin2.w -= self.lr * self.dws[1] self.lin3.w -= self.lr * self.dws[2] self.lin1.b -= self.lr * self.dbs[0] self.lin2.b -= self.lr * self.dbs[1] self.lin3.b -= self.lr * self.dbs[2] . nn = Model(learning_rate=0.0005) epochs = 60 # no. of iterations to train for n in range(epochs): loss, _ = nn.forward(x_train, calc_loss=True, targ=y_train) nn.backward() nn.update() print(f&quot;Loss after interation {n} is {loss:.4f}&quot;) . Loss after interation 0 is 0.6924 Loss after interation 1 is 0.6900 Loss after interation 2 is 0.6859 Loss after interation 3 is 0.6826 Loss after interation 4 is 0.6760 Loss after interation 5 is 0.6683 Loss after interation 6 is 0.6565 Loss after interation 7 is 0.6415 Loss after interation 8 is 0.6190 Loss after interation 9 is 0.5894 Loss after interation 10 is 0.5532 Loss after interation 11 is 0.5110 Loss after interation 12 is 0.4643 Loss after interation 13 is 0.4128 Loss after interation 14 is 0.3635 Loss after interation 15 is 0.3164 Loss after interation 16 is 0.2747 Loss after interation 17 is 0.2389 Loss after interation 18 is 0.2086 Loss after interation 19 is 0.1834 Loss after interation 20 is 0.1624 Loss after interation 21 is 0.1448 Loss after interation 22 is 0.1300 Loss after interation 23 is 0.1174 Loss after interation 24 is 0.1068 Loss after interation 25 is 0.0976 Loss after interation 26 is 0.0897 Loss after interation 27 is 0.0828 Loss after interation 28 is 0.0769 Loss after interation 29 is 0.0716 Loss after interation 30 is 0.0670 Loss after interation 31 is 0.0628 Loss after interation 32 is 0.0591 Loss after interation 33 is 0.0559 Loss after interation 34 is 0.0529 Loss after interation 35 is 0.0502 Loss after interation 36 is 0.0478 Loss after interation 37 is 0.0456 Loss after interation 38 is 0.0436 Loss after interation 39 is 0.0417 Loss after interation 40 is 0.0400 Loss after interation 41 is 0.0384 Loss after interation 42 is 0.0370 Loss after interation 43 is 0.0357 Loss after interation 44 is 0.0344 Loss after interation 45 is 0.0333 Loss after interation 46 is 0.0322 Loss after interation 47 is 0.0312 Loss after interation 48 is 0.0302 Loss after interation 49 is 0.0294 Loss after interation 50 is 0.0285 Loss after interation 51 is 0.0278 Loss after interation 52 is 0.0270 Loss after interation 53 is 0.0263 Loss after interation 54 is 0.0257 Loss after interation 55 is 0.0251 Loss after interation 56 is 0.0245 Loss after interation 57 is 0.0239 Loss after interation 58 is 0.0234 Loss after interation 59 is 0.0229 . plt.plot(nn.losses, color=&quot;teal&quot;) plt.title(&quot;Loss per Iteration&quot;) plt.xlabel(&quot;Iteration&quot;) plt.ylabel(&quot;Loss&quot;); . . Computing accuracy of our model . Let&#39;s check our model performance by computing the accuracy on the validation dataset . def comp_accuracy(preds, targs): &quot;&quot;&quot; Fn that computes the accuracy between the predicted values and the targets &quot;&quot;&quot; m = len(targs) p = np.zeros_like(preds) # convert probas to 0/1 predictions for i in range(len(preds)): if preds[i] &gt; 0.5: p[i] = 1 else: p[i] = 0 print(&quot;Accuracy: &quot; + str(np.sum((p == targs)/m))) . computing accuracy on the train set: . preds = nn.forward(x_train, calc_loss=False) # generate predictions from our model # compute accuracy comp_accuracy(preds, y_train) . Accuracy: 0.9971724787935912 . computing accuracy on the validation set: . preds = nn.forward(x_valid, calc_loss=False) # generate predictions from our model # compute accuracy comp_accuracy(preds, y_valid) . Accuracy: 0.9980535279805351 . . Note: our model achieved a accuracy of 0.99 on both the train and the validation set ! . Generating predictions from the model . test_inp = x_valid[0] # one example from the validation set plt.title(&quot;Input: &quot;) plt.imshow(test_inp.reshape(28,28), cmap=&quot;binary&quot;) plt.show() pred = nn.forward(test_inp, calc_loss=False) predicted_val = int(pred &gt; 0.5) print(f&quot;Predicted output: {predicted_val}&quot;) . . Predicted output: 0 . test_inp = x_valid[2000] # one example from the validation set plt.title(&quot;Input: &quot;) plt.imshow(test_inp.reshape(28,28), cmap=&quot;binary&quot;) plt.show() pred = nn.forward(test_inp, calc_loss=False) predicted_val = int(pred &gt; 0.5) print(f&quot;Predicted output: {predicted_val}&quot;) . . Predicted output: 1 . Summary: . We were able to create a model that can identify classify handwritten digits as either 1&#39;s or 0&#39;s | We successfully computed the forward and backward progation of a neural network from scratch. | . Thanks for reading ! .",
            "url": "https://benihime91.github.io/blog/machinelearning%20deeplearning%20python3.x%20numpy/2020/09/22/nn-from-scratch.html",
            "relUrl": "/machinelearning%20deeplearning%20python3.x%20numpy/2020/09/22/nn-from-scratch.html",
            "date": " • Sep 22, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://benihime91.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://benihime91.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Hi there 👋 I&#39;m Ayushman 👨‍💻 ! . . Hi! I am Ayushman, a 3rd Year Undergrad student currently pursuing a Bachelor of Technology (B.Tech) in Computer Science Engineering (CSE) at the Central Institue of Technology , Kokrajhar (CIT Kokrajhar). . I am originally from the small city of Guwahati, Assam in India which hosts the smallest river island in the world. . I have recently started a new path towards Deep Learning. As of writing, I am officialy 5 months into this journey of learning. Pursuing this goal of Deep Learning has made me realize that learned that I love problem solving. I aspire to be on the forefront developing algorithms in all aspects of Deep Learning. I am interested in research related to deep learning, computer vision, reinforcement learning. . I enjoy coding in Python. Python to me is one of the most wonderful computer languages ever created. Recently I also started learning Julia language. My github account hosts all of my code and documentation, which includes all the notebooks from the blog posts as well as any projects. . There are quite a few things I am passionate about in life, and Deep Learning is just one facet of my life. I enjoy reading novels in my free-time especially the ones with thriller and mystery elements in it. . Feel free to contact me at aburagohain160@gmail.com . . Connect with me: . . .",
          "url": "https://benihime91.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://benihime91.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}