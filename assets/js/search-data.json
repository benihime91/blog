{
  
    
        "post0": {
            "title": "Creating a NeuralNetwork from scratch",
            "content": "I will assume that you all know what a artificial neural network is and have a little bit of knowledge about forward and backward propagation. Just having a simple idea is enough. . If you do not know what the above terms are or would like to brush up on the topics , I would suggest this amazing youtube playlist by 3Blue1Brown. . Setting up Imports: . import numpy as np import gzip import pickle import pandas as pd import matplotlib.pyplot as plt import warnings np.random.seed(123) %matplotlib inline warnings.filterwarnings(&quot;ignore&quot;) . Preparing the data . For this blog post, we&#39;ll use one of the most famous datasets in computer vision, MNIST. MNIST contains images of handwritten digits, collected by the National Institute of Standards and Technology and collated into a machine learning dataset by Yann Lecun and his colleagues. Lecun used MNIST in 1998 in Lenet-5, the first computer system to demonstrate practically useful recognition of handwritten digit sequences. This was one of the most important breakthroughs in the history of AI. . Run the code below to download the MNIST dataset. The dataset will be downloaded to the path ../../Datasets/ or you can modify the path as you like. . !wget -P &quot;../../Datasets/&quot; http://deeplearning.net/data/mnist/mnist.pkl.gz . def get_data(path): &quot;&quot;&quot; Fn to unzip the MNIST data and return the data as numpy arrays &quot;&quot;&quot; with gzip.open(path, &#39;rb&#39;) as f: ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=&#39;latin-1&#39;) return map(np.array, (x_train,y_train,x_valid,y_valid)) x_train,y_train,x_valid,y_valid = get_data(path= &quot;../../Datasets/mnist.pkl.gz&quot;) tots,feats = x_train.shape print(&quot;Shape of x_train:&quot;,x_train.shape) print(&quot;Total number of examples:&quot;, tots) print(&quot;Number of pixel values per image:&quot;, feats) . Shape of x_train: (50000, 784) Total number of examples: 50000 Number of pixel values per image: 784 . To make our life a bit easier we are going to take only the examples that contain a 1 or 0. . zero_mask = [y_train==0] # grab all the index values where 0 is present one_mask = [y_train==1] # grad all the index valus where 1 is present # grab all the 1&#39;s and 0&#39;s and make training set x_train = np.vstack((x_train[zero_mask], x_train[one_mask])) y_train = np.reshape(y_train, (-1,1)) y_train = np.squeeze(np.vstack((y_train[zero_mask], y_train[one_mask]))) x_train.shape, y_train.shape . ((10610, 784), (10610,)) . Hence, now our training set has 10610 examples . Let&#39;s view some example images from our dataset: . Basic Model Architecture . For this task we are going to use a very basic model architecture this 2 linear layers and a output layer with 10 outputs. . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G X X linear1 linear1 X&#45;&gt;linear1 relu relu linear1&#45;&gt;relu linear2 linear2 relu&#45;&gt;linear2 sigmoid sigmoid linear2&#45;&gt;sigmoid prediction prediction sigmoid&#45;&gt;prediction loss loss prediction&#45;&gt;loss W1 W1 W1&#45;&gt;linear1 B1 B1 B1&#45;&gt;linear1 W2 W2 W2&#45;&gt;linear2 B2 B2 B2&#45;&gt;linear2 target target target&#45;&gt;loss Let&#39;s take a deep dive into what this network means: . Let&#39;s take at look at all the individual components of this network: . Linear: The linear layer computes the following : . out = matmul(input,W1) + B1 . | ReLU: The relu computes the following: . out = max(0, input) . | Sigmoid: The sigmoid computes the following: . out = 1/(1 + e.pow(input)) . | Loss: For the loss we are going to use the CrossEntropy Loss which is defined by the follwoing equation: $$loss= - frac{1}{m} sum limits_{i = 1}^{m} (y^{(i)} log left(yhat^{(i)} right) + (1-y^{(i)}) log left(1-yhat^{(i)} right)) $$ . | . Now that we have our model architecture, let&#39;s create the different parts needed to assemble the model: . linear layer | relu activation | sigmoid activation | loss | . The Backward pass of out model would look something like this: . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G prediction prediction loss loss prediction&#45;&gt;loss sigmoid sigmoid loss&#45;&gt;sigmoid linear2 linear2 sigmoid&#45;&gt;linear2 relu relu linear2&#45;&gt;relu W2 W2 linear2&#45;&gt;W2 B2 B2 linear2&#45;&gt;B2 linear1 linear1 relu&#45;&gt;linear1 W1 W1 linear1&#45;&gt;W1 B1 B1 linear1&#45;&gt;B1 target target target&#45;&gt;loss Let&#39;s first try to make some sense of what is happening in the backward and forward pass of our model: . On paper our forward pass would look like this is pseudo-code: . inputs = x # original inputs targets = y # original targets z1 = inputs @ w2 + b2 a1 = relu(z1) z2 = a1 @ w2 + b2 a2 = sigmoid(z2) # this is our model prediction loss = loss_fn(a2, targets) . Consequently our backward pass in psuedo code would be something like this : . (Let us assume that the grad(inp, out) computes the gradients of inp wrt out) . # gradient of loss wrt output of the previous activation layer da2 = grad(loss, a2) # gradient of the loss wrt to weight w2 dw2 = grad(loss, w2) = grad(loss, a2) * grad(a2, w2) = da2 * grad(z2, w2) # gradient of the loss wrt to bias b2 db2 = grad(loss, b2) = grad(loss, a2) * grad(a2, b2) = da2 * grad(z2, b2) # gradient of loss wrt z2: dz2 = grad(loss, z2) = grad(loss, a2) * grad(a2,z2) # these are needed to continue the backward-pass # gradient of loss wrt a1 da1 = grad(loss, a1) = grad(loss, z2) * grad(z2, a1) = dz2 * grad(z2, a1) # gradient of the loss wrt to weight w1 dw1 = grad(loss, w1) = grad(loss, a1) * grad(a1, w1) = dz1 * grad(a1, w1) # gradient of the loss wrt to bias b1 db1 = grad(loss, b1) = grad(loss, a1) * grad(a1, b1) = dz1 * grad(a1, b1) # gradient of loss wrt z1 dz1 = grad(loss, z1) = grad(loss, a1) * grad(a1, z1) = da1 * grad(a1, z1) # Update parameters : # since we now have all the required gradients we can now perform the update step w1 -= learning_rate * dw1 b1 -= learning_rate * db1 w2 -= learning_rate * dw2 b2 -= learning_rate * db2 . The Linear Layer . Below code creates a Linear class which represents a Linear layer in out neural-network. The forward function of the class implements the of the layer&#39;s forward propagation &amp; the backward function implements the layers&#39;s backward propagation. Let&#39;s go to detail into what the code means: . forward: This part is quite straight-forward it computes the dot-product between the input and the weights &amp; adds the bias term to get z. It also stores all the intermidiate values generated to use in the backward pass. . | backward: This part is a bit complicated. Let&#39;s go through this. The backward method of the class Linear takes in the argument grads. grads is just the gradients calculated from the previous layers or if we were to follow the nonenclature of the above written pseudo-codes : grads would be same as da. . | . class Linear: def __init__(self, w, b): self.w = w self.b = b def forward(self, inp): &quot;&quot;&quot; Implement the linear part of a layer&#39;s forward propagation. Args: -- inp : activations from previous layer (or input data) Returns: - Z : the input of the activation function, also called pre-activation parameter &quot;&quot;&quot; self.inp = inp self.z = inp @ self.w + self.b return self.z def backward(self, grads): &quot;&quot;&quot; Implement the linear portion of backward propagation for a single layer. Args: - grads : Gradient of the cost with respect to the linear output. or the accumulated gradients from the prev layers. This is used for the chain rule to compute the gradients. Returns: - dA_prev : Gradient of cost wrt to the activation of the input of the current of layer. dW : Gradient of the cost with respect to W dB : Gradient of the cost with respect to b &quot;&quot;&quot; m = self.inp.shape[1] dW = 1/m * (self.inp.T @ grads) dB = 1/m * np.sum(grads, axis=1, keepdims=True) dA_prev = grads @ self.w.T return (dA_prev, dW, dB) . The ReLU Layer: . class RelU: def forward(self, inp): &quot;&quot;&quot; Implement the RELU function. Arguments: inp : Output of the linear layer, of any shape Returns: output: Post-activation parameter, of the same shape as Z &quot;&quot;&quot; self.inp = inp self.output = np.maximum(0, self.inp) return self.output def backward(self, grads): &quot;&quot;&quot; Implement the backward propagation for a single RELU unit. Arguments: grads : post-activation gradient, of any shape Returns: dZ : Gradient of the cost with respect to Z &quot;&quot;&quot; dZ = np.array(grads, copy=True) dZ[self.inp &lt;= 0] = 0 return dZ .",
            "url": "https://benihime91.github.io/blog/deeplearning%20python3.x%20numpy/2020/09/22/nn-from-scratch.html",
            "relUrl": "/deeplearning%20python3.x%20numpy/2020/09/22/nn-from-scratch.html",
            "date": " • Sep 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://benihime91.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://benihime91.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://benihime91.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://benihime91.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}